<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dictionary更改Key的方法</title>
      <link href="2020/10/28/Dictionary%E6%9B%B4%E6%94%B9Key%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>2020/10/28/Dictionary%E6%9B%B4%E6%94%B9Key%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.triggerDic.ToDictionary(k =&gt; k.Key == &quot;old&quot; ? &quot;new&quot; : k.Key, k =&gt; k.Value);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linq去重</title>
      <link href="2020/09/28/Linq%E5%8E%BB%E9%87%8D/"/>
      <url>2020/09/28/Linq%E5%8E%BB%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<p>很Easy，先按去重的字段GroupBy，在取first。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.GroupBy(a =&gt; a.TimeStamp).Select(a =&gt; a.First())</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jquery中点击a中的span不跳转，以及阻止a事件</title>
      <link href="2020/08/06/jquery%E4%B8%AD%E7%82%B9%E5%87%BBa%E4%B8%AD%E7%9A%84span%E4%B8%8D%E8%B7%B3%E8%BD%AC%EF%BC%8C%E4%BB%A5%E5%8F%8A%E9%98%BB%E6%AD%A2a%E4%BA%8B%E4%BB%B6/"/>
      <url>2020/08/06/jquery%E4%B8%AD%E7%82%B9%E5%87%BBa%E4%B8%AD%E7%9A%84span%E4%B8%8D%E8%B7%B3%E8%BD%AC%EF%BC%8C%E4%BB%A5%E5%8F%8A%E9%98%BB%E6%AD%A2a%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>今天在写一个jquery的项目时，发生一个情况，那就是a标签下嵌套一个span，我希望点击这个span既不触发a的click事件，又不触发a的跳转动作。</p><h6 id="阻止a的跳转动作"><a href="#阻止a的跳转动作" class="headerlink" title="阻止a的跳转动作"></a>阻止a的跳转动作</h6><p>给span添加一个样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;stophref&quot;&gt;点击我&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><p>然后监听这个样式的span，如果点击就触发停止跳转动作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.stophref&quot;).click(function(e) &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h6 id="阻止a的点击事件"><a href="#阻止a的点击事件" class="headerlink" title="阻止a的点击事件"></a>阻止a的点击事件</h6><p>道理很简单，就是在span的点击事件里阻止事件继续向外层扩散<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.event.stopPropagation();</span><br></pre></td></tr></table></figure></p><p>大功告成~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用PDE.License对程序进行License验证</title>
      <link href="2020/07/16/%E4%BD%BF%E7%94%A8PDE-License%E5%AF%B9%E7%A8%8B%E5%BA%8F%E8%BF%9B%E8%A1%8CLicense%E9%AA%8C%E8%AF%81/"/>
      <url>2020/07/16/%E4%BD%BF%E7%94%A8PDE-License%E5%AF%B9%E7%A8%8B%E5%BA%8F%E8%BF%9B%E8%A1%8CLicense%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p>在定做程序中，需要验证License来确定客户运行的程序是否合法。</p><p>PDE.LicenseVerification就是咱们公司的License验证类库。</p><p>验证License主要分为两种，一种是验证License服务，另一种是验证Lic文件，下面分别说明。</p><h5 id="验证License服务"><a href="#验证License服务" class="headerlink" title="验证License服务"></a>验证License服务</h5><p> 一般在服务器上会运行我们的License服务，服务会包含该服务器可用的程序信息，我们在程序内部验证服务即可。验证方法如下</p><p> 1.引用<code>PDE.LicenseVerification</code>类库；</p><p> 2.调用验证服务方法<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> //校验License是否正确</span><br><span class="line">bool isRightLicense = PDE.LicenseVerification.Verification.CheckLicenseService(&quot;AppCode&quot;, DateTime.Now, out int errorCode);</span><br><span class="line">//如果License错误，抛出异常，并提示错误码</span><br><span class="line">if (!isRightLicense)</span><br><span class="line">&#123;</span><br><span class="line">    throw new Exception($&quot;License error(&#123;errorCode&#125;).Please contact CRTsoft.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 其中AppCode是程序的唯一编码，需要主管确认。</p><h5 id="验证License文件"><a href="#验证License文件" class="headerlink" title="验证License文件"></a>验证License文件</h5><p> 文件方式的License主要用于单个客户端(Form)程序，此时客户端会带有一个本机器可用的License文件，我们在客户端程序内部进行验证License</p><p> 1.引用<code>PDE.LicenseVerification</code>类库；</p><p> 2.调用验证文件方法<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> //校验License是否正确</span><br><span class="line">bool isRightLicense = PDE.LicenseVerification.Verification.CheckLicenseFile(&quot;AppCode&quot;, DateTime.Now, out int errorCode);</span><br><span class="line">//如果License错误，抛出异常，并提示错误码</span><br><span class="line">if (!isRightLicense)</span><br><span class="line">&#123;</span><br><span class="line">    throw new Exception($&quot;License error(&#123;errorCode&#125;).Please contact CRTsoft.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 与上面验证服务类似，需要注意的是本函数默认验证的Lic文件需与当前exe在同一目录下，且名称相同（仅扩展名不同,exe和lic）。</p><p> 如需自定义License文件全路径等信息，本函数有重载函数，可以输入参数。</p><h5 id="验证方法写在哪里？"><a href="#验证方法写在哪里？" class="headerlink" title="验证方法写在哪里？"></a>验证方法写在哪里？</h5><p> 对于Winform程序，写在Program入口信息处，如果验证不通过直接抛出异常阻止继续执行；</p><p> 对于Windows Service程序，写在定时器内，扫描执行函数时，对License进行验证，如果验证不通过就抛出异常并停止当前服务。</p><p> 对于Asp.Net WebForm程序，写在BasePage基类的Page_Init函数中，每个页面访问时都会先验证License，如不通过就抛出异常，终止页面业务请求。</p><p> 对于Asp.Net MVC或WebAPI程序，自定义过滤器，并全局引用。此时，客户调用任意API就会触发验证License函数，如不通过就抛出异常，终止业务请求。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#String替换Replace忽略大小写</title>
      <link href="2020/07/14/C-String%E6%9B%BF%E6%8D%A2Replace%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99/"/>
      <url>2020/07/14/C-String%E6%9B%BF%E6%8D%A2Replace%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>在.Net中对string进行替换一般用Replace，但是如果是忽略大小写，一般有几种方式，或者写函数判断位置，替换后拼接，或者使用Regex。这里说说使用Regex的情况</p><h6 id="使用Regex"><a href="#使用Regex" class="headerlink" title="使用Regex"></a>使用Regex</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Regex.Replace(str, oldValue, newValue, RegexOptions.IgnoreCase)</span><br></pre></td></tr></table></figure><p>但是其原理是使用正则表达式匹配，那么就会存在正则特殊字符，例如括号，斜杠等匹配错误的问题，于是我们需要对oldValue进行一下转义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Regex.Replace(str, Regex.Escape(oldValue), newValue, RegexOptions.IgnoreCase)</span><br></pre></td></tr></table></figure></p><p>使用Escape转义后，大工告成矣。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>未能找到路径 csc.exe的一部分</title>
      <link href="2020/07/08/%E6%9C%AA%E8%83%BD%E6%89%BE%E5%88%B0%E8%B7%AF%E5%BE%84-csc-exe%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86/"/>
      <url>2020/07/08/%E6%9C%AA%E8%83%BD%E6%89%BE%E5%88%B0%E8%B7%AF%E5%BE%84-csc-exe%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>最近在WebAPI中，领导机器部署后报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">未能找到路径“~\bin\roslyn\csc.exe”的一部分</span><br></pre></td></tr></table></figure></p><p>只能从我本机将roslyn目录拷贝给领导，手动放到bin文件下才可以</p><p>然后从网上找了解决方案，让安装以下两个Nuget包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　Microsoft.CodeDom.Providers.DotNetCompilerPlatform</span><br><span class="line">　Microsoft.Net.Compilers</span><br></pre></td></tr></table></figure></p><p>我看了项目，第一个包Nuget已有，第二个没有，然后Nuget搜了一下，没想到直接安装失败了，项目都编译不通过了，我只能用记事本打开csproj文件，删掉<code>Microsoft.Net.Compilers</code>有关内容，重新打开才编译通过。</p><p>后面又找到一个解决方案，按步骤操作后弃用了csc，当然我现在也不知道有什么影响，反正编译都能通过了，此处记录一下，后续原理之后再深究<br>将这两个Nuget包删了(我项目原本就只有第一个)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　Microsoft.CodeDom.Providers.DotNetCompilerPlatform</span><br><span class="line">　Microsoft.Net.Compilers</span><br></pre></td></tr></table></figure></p><p>打开web.config，将相关引用删了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.codedom&gt;</span><br><span class="line">  &lt;compilers&gt;</span><br><span class="line">    &lt;compiler language=&quot;c#;cs;csharp&quot; extension=&quot;.cs&quot; type=&quot;Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.7.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot; warningLevel=&quot;4&quot; compilerOptions=&quot;/langversion:default /nowarn:1659;1699;1701&quot; /&gt;</span><br><span class="line">    &lt;compiler language=&quot;vb;vbs;visualbasic;vbscript&quot; extension=&quot;.vb&quot; type=&quot;Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.7.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot; warningLevel=&quot;4&quot; compilerOptions=&quot;/langversion:default /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+&quot; /&gt;</span><br><span class="line">  &lt;/compilers&gt;</span><br><span class="line">&lt;/system.codedom&gt;</span><br></pre></td></tr></table></figure></p><p>然后重新生成编译后，项目中默认已经没有 <code>roslyn</code> 文件夹了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Cordova将H5(vue)打包为安卓apk</title>
      <link href="2020/06/28/%E4%BD%BF%E7%94%A8Cordova%E5%B0%86H5-vue-%E6%89%93%E5%8C%85%E4%B8%BA%E5%AE%89%E5%8D%93apk/"/>
      <url>2020/06/28/%E4%BD%BF%E7%94%A8Cordova%E5%B0%86H5-vue-%E6%89%93%E5%8C%85%E4%B8%BA%E5%AE%89%E5%8D%93apk/</url>
      
        <content type="html"><![CDATA[<p>最近用vue做了一个移动端的小网页，希望研究一下将它打包为安卓APK，记录一下步骤。</p><p>需要说明的是，中间遇到很多坑，主要是因为墙内墙外网络不通的问题，毕竟打包离不开google。</p><h4 id="环境篇"><a href="#环境篇" class="headerlink" title="环境篇"></a>环境篇</h4><h6 id="Node-js、NPM"><a href="#Node-js、NPM" class="headerlink" title="Node.js、NPM"></a>Node.js、NPM</h6><p>这个不说了，前面搭建hexo时文章详细记录了</p><h6 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h6><p>官网下载，我是百度找了个从百度云下的，Oracle现在下载都要账号了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</span><br></pre></td></tr></table></figure></p><p>然后配置环境变量，Windows新建变量<code>JAVA_HOME</code>,目录为<code>jdk1.8.0_212</code>。然后配置<code>Path</code>，增加<code>%JAVA_HOME%\bin</code>和<code>%JAVA_HOME%\jre\bin</code>。</p><p>Mac需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.Bash_Profile</span><br><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_162.jdk/Contents/Home</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><h6 id="Andorid-SDK"><a href="#Andorid-SDK" class="headerlink" title="Andorid SDK"></a>Andorid SDK</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.androiddevtools.cn/</span><br></pre></td></tr></table></figure><p>找SDK Tools，下载，一两百M那个，别下载成Studio了</p><p>Windows：</p><p>下载好解压后，运行SDK Manager，然后选择要装的，一般默认的加9.0,8.0等版本的SDK platform和Sources For Android SDK（第一个和最后一个）就行了。</p><p>配置环境变量：增加变量<code>ANDROID_SDK_HOME</code>,目录为：解压的目录; Path中增加<code>%ANDROID_SDK_HOME%\platform-tools</code>和<code>%ANDROID_SDK_HOME%\tools</code></p><p>Mac:<br>一样下载解压，通过命令执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Downloads/android/android-sdk-macosx/tools</span><br><span class="line">./android</span><br></pre></td></tr></table></figure></p><p>配置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=/Users/[user name]/Library/Android/sdk</span><br><span class="line">export PATH=$PATH:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$ANDROID_HOME/tools</span><br></pre></td></tr></table></figure></p><h6 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://services.gradle.org/distributions/</span><br></pre></td></tr></table></figure><p>我下载了那个4.10.3-all，因为我开始下的6，后来打包它又自己下4.10.3了，所以第二次干脆直接下的这个版本</p><p>环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRADLE_HOME</span><br><span class="line">%GRADLE_HOME%\bin</span><br></pre></td></tr></table></figure></p><h6 id="安装Cordova"><a href="#安装Cordova" class="headerlink" title="安装Cordova"></a>安装Cordova</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cordova</span><br></pre></td></tr></table></figure><p>注意，这里一定要npm，不能cnpm，否则后面不能create，npm连不上的，直接把npm镜像换成淘宝镜像</p><h4 id="项目篇"><a href="#项目篇" class="headerlink" title="项目篇"></a>项目篇</h4><h6 id="创建Cordova项目"><a href="#创建Cordova项目" class="headerlink" title="创建Cordova项目"></a>创建Cordova项目</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cordova create myproject com.crtsoft.iem myproject</span><br><span class="line">cd myproject</span><br><span class="line">cordova platforms add android</span><br></pre></td></tr></table></figure><h6 id="VUE项目"><a href="#VUE项目" class="headerlink" title="VUE项目"></a>VUE项目</h6><p>把vue项目复制到cordova的项目的根目录下</p><p>修改Vue项目config/index.js文件.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Index地址修改为 ../../www/index.html</span><br><span class="line">AssetsRoot地址修改为 ../../www</span><br></pre></td></tr></table></figure><p>编译之</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h4 id="打包篇"><a href="#打包篇" class="headerlink" title="打包篇"></a>打包篇</h4><h6 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova requirements</span><br></pre></td></tr></table></figure><p>不报错就是OK，一般检查Jdk，Android SDK，Gradle，虚拟机这几项。</p><h6 id="打包debug"><a href="#打包debug" class="headerlink" title="打包debug"></a>打包debug</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build android</span><br></pre></td></tr></table></figure><p>需要注意的是，这里会自动下载gradle，墙内基本无法访问，会报错，就算不报错，后面你也打包不成，放弃吧。</p><p>翻墙后下载的也不快，所以这里可以用浏览器下载好，然后放在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.gradle\wrapper\dists\gradle-3.0-all\23vckjsl324lk</span><br></pre></td></tr></table></figure></p><p>后面那串乱码的文件夹名称不固定，找个乱码的并且修改日期最新的，就它了，放进去。</p><h6 id="打包release"><a href="#打包release" class="headerlink" title="打包release"></a>打包release</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build android --release</span><br></pre></td></tr></table></figure><p>生成后，在<code>/cordovaApp/platforms/android/app/build/outputs/apk/</code>的debug或realease里。</p><h6 id="签名文件"><a href="#签名文件" class="headerlink" title="签名文件"></a>签名文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -keystore C:\test.keystore -alias test -keyalg RSA -validity 20000</span><br></pre></td></tr></table></figure><p>这里要记住alias的名，注意这里在windows下用git bash会乱码，用cmd显示正常，然后需要输入开发者的名称，组织，单位，城市等等，注意此过程有2个密码，一个是密匙库口令，一个是别名口令，反正记着这两个密码，然后执行后，C根目录下（随意目录）就有这个keystore文件了，拷贝之。</p><h6 id="给release签名"><a href="#给release签名" class="headerlink" title="给release签名"></a>给release签名</h6><p>将keystore和unsigned的apk放在一起，cd到这里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore test.keystore app-release-unsigned.apk test</span><br></pre></td></tr></table></figure></p><p>让输两次密码吧应该，我忘记了，昨晚搞到这时候基本要崩溃了，因为墙的问题，差点气死。</p><p>然后那个unsigned的apk直接就变成签名的了，不会生成新的，复制到手机上就可以安装了。</p><p>OKay,That is all.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Winform菜单栏勾选框错位的问题</title>
      <link href="2020/05/22/Winform%E8%8F%9C%E5%8D%95%E6%A0%8F%E5%8B%BE%E9%80%89%E6%A1%86%E9%94%99%E4%BD%8D%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2020/05/22/Winform%E8%8F%9C%E5%8D%95%E6%A0%8F%E5%8B%BE%E9%80%89%E6%A1%86%E9%94%99%E4%BD%8D%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="\images\pasted-sam-108.png" alt="upload successful"></p><p>此问题是由于更改父级菜单的属性高度，导致不匹配的问题。</p><p>解决方案<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">更改父级MenuStrip的ImageScalingSize为默认的16,16</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#获取所有继承类</title>
      <link href="2020/05/22/C-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E7%BB%A7%E6%89%BF%E7%B1%BB/"/>
      <url>2020/05/22/C-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E7%BB%A7%E6%89%BF%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var settings = typeof(_GeneralSettings).Assembly.GetTypes() //获取当前类库下所有类型</span><br><span class="line">    .Where(t =&gt; typeof(_GeneralSettings).IsAssignableFrom(t)) //获取间接或直接继承t的所有类型</span><br><span class="line">    .Where(t =&gt; !t.IsAbstract &amp;&amp; t.IsClass) //获取非抽象类 排除接口继承</span><br><span class="line">    .OrderBy(a =&gt; a.Name)</span><br><span class="line">    .Select(t =&gt; (_GeneralSettings)Activator.CreateInstance(t));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Datatable使用Linq</title>
      <link href="2020/05/15/Datatable%E4%BD%BF%E7%94%A8Linq/"/>
      <url>2020/05/15/Datatable%E4%BD%BF%E7%94%A8Linq/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.myDataSet.Tables[STDNames.TagList_String].AsEnumerable().</span><br><span class="line">                        Where(a =&gt; !a.Field&lt;bool&gt;(&quot;__Deleted&quot;))</span><br><span class="line">                        .Select(b =&gt; b.Field&lt;string&gt;(&quot;Value&quot;))</span><br><span class="line">                        .Distinct()</span><br><span class="line">                        .Count();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue中Keep-alive(页面缓存)的使用</title>
      <link href="2020/03/31/vue%E4%B8%ADKeep-alive-%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/03/31/vue%E4%B8%ADKeep-alive-%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98-%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在开发网页时，尤其是移动端网页跳转时，会碰到以下问题，那就是在列表中我滚动到页面下方第很多页时，点击项跳转编辑页面，但是我没有编辑，返回时，列表页状态没有了，需要从第一页开始重新往下滚动，那么就需要有一个功能，把页面状态给存储起来，当我返回的时候，直接显示，而不是重新加载。</p><p>vue的keep-alive组件就提供了这个功能。</p><p>简单的总结，就是在路由配置的meta添加keepAlive属性，为true的路由使用keep-alive组件。</p><p>然后对于keep-alive组件中的页面，可能只需要某些情况需要缓存，其他情况依然需要重新刷新数据，于是就使用activated钩子函数来解决这个问题。</p><h6 id="配置路由的meta属性"><a href="#配置路由的meta属性" class="headerlink" title="配置路由的meta属性"></a>配置路由的meta属性</h6><p>在router文件夹的index.js中，对部分页面进行keepAlive属性设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &apos;/favorite&apos;,</span><br><span class="line">  name: &apos;favorite&apos;,</span><br><span class="line">  component: FavoriteCom,</span><br><span class="line">  meta:</span><br><span class="line">  &#123;</span><br><span class="line">    keepAlive: true,</span><br><span class="line">    isBack: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里的isBack属性就是为了判断从哪些页面进入时直接显示，而从哪些页面进入时要刷新数据了。</p><h6 id="路由出口设置"><a href="#路由出口设置" class="headerlink" title="路由出口设置"></a>路由出口设置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;router-view v-if=&quot;$route.meta.keepAlive&quot; /&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line">&lt;router-view v-if=&quot;!$route.meta.keepAlive&quot; /&gt;</span><br></pre></td></tr></table></figure><h6 id="在Favorite-vue组件中，我们用beforeRouteEnter来拦截路由"><a href="#在Favorite-vue组件中，我们用beforeRouteEnter来拦截路由" class="headerlink" title="在Favorite.vue组件中，我们用beforeRouteEnter来拦截路由"></a>在Favorite.vue组件中，我们用beforeRouteEnter来拦截路由</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter(to, from, next) &#123;</span><br><span class="line">  to.meta.isBack = false;</span><br><span class="line">  //</span><br><span class="line">  if (from.path == &quot;/chart&quot; || from.path == &quot;/favoritesetting&quot;) &#123;</span><br><span class="line">    to.meta.isBack = true;</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个含义就是如果是从chart页面或者favoritesetting页面进入此页，则设置属性isBack，表明需要显示缓存</p><h6 id="在favorite-vue组件中，设置activated钩子函数"><a href="#在favorite-vue组件中，设置activated钩子函数" class="headerlink" title="在favorite.vue组件中，设置activated钩子函数"></a>在favorite.vue组件中，设置activated钩子函数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">activated() &#123;</span><br><span class="line">    if (!this.$route.meta.isBack) &#123;</span><br><span class="line">      this.ReLoadData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个含义就是，如果isBack属性为false，那么就刷新页面，反之就不做任何操作。</p><h6 id="one-more-question"><a href="#one-more-question" class="headerlink" title="one more question"></a>one more question</h6><p>还有一个问题，就是假如我进入编辑页面，如果没有编辑直接返回，那么不需要刷新，如果编辑并保存了属性，这时候跳转回列表页需要刷新数据，该如何操作呢？</p><p>这里有两种方法</p><p>1.通过前台修改数据。  这个不具体说了，就是获取到改了哪些数据，然后手动修改在页面上</p><p>2.我这次用的方法，就是保存成功后，需要刷新列表，那么favorite列表页怎么判断是没有修改的setting页跳转还是修改后的setting页跳转的呢。</p><p>这里我采用了中间页的方式，新建一个页面专门用来做中转跳转，从这个页跳到的favorite(或其他页面)，当然就会刷新列表了</p><p>新建JumpPage文件夹，Index.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">created()</span><br><span class="line">&#123;</span><br><span class="line">    //从此页跳转就刷新了</span><br><span class="line">    this.$router.push(&#123;name:this.$route.query.RouteName&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>然后在setting页保存成功后，跳转到jumppage<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">  path: &quot;/jumppage&quot;,</span><br><span class="line">  query: &#123; RouteName: &quot;favorite&quot; &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>好了，这样就实现了此功能。</p><p>在以后使用vuex时，将会有更好的办法。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue写工具函数，导入使用</title>
      <link href="2020/03/31/vue%E5%86%99%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0%EF%BC%8C%E5%AF%BC%E5%85%A5%E4%BD%BF%E7%94%A8/"/>
      <url>2020/03/31/vue%E5%86%99%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0%EF%BC%8C%E5%AF%BC%E5%85%A5%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在写vue项目时，也需要对一些通用的函数进行封装，然后方便调用。方法是这样的。这里以时间格式化函数为例。</p><h6 id="在src中新建一个scripts文件夹，新建一个timeutil-js文件"><a href="#在src中新建一个scripts文件夹，新建一个timeutil-js文件" class="headerlink" title="在src中新建一个scripts文件夹，新建一个timeutil.js文件"></a>在src中新建一个scripts文件夹，新建一个timeutil.js文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const timeFormatter = function FormatTime(val, formatter) &#123;</span><br><span class="line">    let year = val.getFullYear();</span><br><span class="line">    let month = val.getMonth() + 1;</span><br><span class="line">    let day = val.getDate();</span><br><span class="line">    let hour = val.getHours();</span><br><span class="line">    let minute = val.getMinutes();</span><br><span class="line">    let second = val.getSeconds();</span><br><span class="line">    if (month &gt;= 1 &amp;&amp; month &lt;= 9) &#123;</span><br><span class="line">        month = `0$&#123;month&#125;`;</span><br><span class="line">    &#125;</span><br><span class="line">    if (day &gt;= 1 &amp;&amp; day &lt;= 9) &#123;</span><br><span class="line">        day = `0$&#123;day&#125;`;</span><br><span class="line">    &#125;</span><br><span class="line">    if (hour &gt;= 0 &amp;&amp; hour &lt;= 9) &#123;</span><br><span class="line">        hour = `0$&#123;hour&#125;`;</span><br><span class="line">    &#125;</span><br><span class="line">    if (minute &gt;= 0 &amp;&amp; minute &lt;= 9) &#123;</span><br><span class="line">        minute = `0$&#123;minute&#125;`;</span><br><span class="line">    &#125;</span><br><span class="line">    if (second &gt;= 0 &amp;&amp; second &lt;= 9) &#123;</span><br><span class="line">        second = `0$&#123;second&#125;`;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!formatter) &#123;</span><br><span class="line">        return `$&#123;year&#125;-$&#123;month&#125;-$&#123;day&#125; $&#123;hour&#125;:$&#123;minute&#125;:$&#123;second&#125;`;</span><br><span class="line">    &#125;</span><br><span class="line">    return formatter.replace(&quot;yyyy&quot;, year).replace(&quot;MM&quot;, month)</span><br><span class="line">    .replace(&quot;dd&quot;, day).replace(&quot;HH&quot;, hour)</span><br><span class="line">    .replace(&quot;mm&quot;, minute).replace(&quot;ss&quot;,second);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export &#123; timeFormatter &#125;;</span><br></pre></td></tr></table></figure><h6 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h6><p>在.vue组件中导入使用即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; timeFormatter &#125; from &quot;../../scripts/timeutil&quot;;</span><br></pre></td></tr></table></figure></p><p>使用时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeFormatter(val, &quot;yyyy-MM-dd HH:mm&quot;);</span><br></pre></td></tr></table></figure><p>Cool~~~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6数组交换两个对象的顺序</title>
      <link href="2020/03/31/ES6%E6%95%B0%E7%BB%84%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%A1%BA%E5%BA%8F/"/>
      <url>2020/03/31/ES6%E6%95%B0%E7%BB%84%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>在写vue时，需要对数组的两个元素进行交换，发现以下新语法很有趣，记录下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a,b]=[b,a]</span><br></pre></td></tr></table></figure></p><p>也就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[list[0],list[1]]=[list[1],list[0]]</span><br></pre></td></tr></table></figure><p>Cool</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6数组每个对象添加属性</title>
      <link href="2020/03/31/ES6%E6%95%B0%E7%BB%84%E6%AF%8F%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/"/>
      <url>2020/03/31/ES6%E6%95%B0%E7%BB%84%E6%AF%8F%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>在写demo项目时，碰到个问题，那就是我希望对返回的数组新增一个属性，所有对象都新增这个属性，因为我不增加属性的话，用true，false判断发生了一些问题，不能都识别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var array =    [&#123;key: 1, value: 10&#125;, </span><br><span class="line">               &#123;key: 2, value: 20&#125;, </span><br><span class="line">               &#123;key: 3, value: 30&#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var arrayResult = array.map(function(obj,index) &#123; </span><br><span class="line">   obj.isSelected=true;//添加属性</span><br><span class="line">   return obj;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ES6新语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.from(array , item =&gt; item.isSelected = false)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-router路由拦截</title>
      <link href="2020/03/31/vue-router%E8%B7%AF%E7%94%B1%E6%8B%A6%E6%88%AA/"/>
      <url>2020/03/31/vue-router%E8%B7%AF%E7%94%B1%E6%8B%A6%E6%88%AA/</url>
      
        <content type="html"><![CDATA[<p>在router的index.js加上beforeeach拦截，如果检查用户未登录就跳转登录页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  if (to.meta.allowAnymous) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    let tickets = localStorage.getItem(&apos;tickets&apos;);</span><br><span class="line">    if (tickets == null || tickets == &apos;&apos;) &#123;</span><br><span class="line">      next(&apos;/login&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对不用登录的路由配置meta中，添加allowAnymous属性，这样就可以实现对各页面的登录判断了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Axios拦截器</title>
      <link href="2020/03/31/Axios%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>2020/03/31/Axios%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在vue项目中，需要使用axios请求数据，那么如果需要对请求操作，获取数据操作进行统一的配置，例如请求时我们添加token头用来认证，错误时获取错误码，如果是401就跳转登录页面等操作时，就需要使用拦截器功能。</p><p>拦截器分为request拦截和response拦截，也就是请求和响应。</p><h5 id="request拦截器"><a href="#request拦截器" class="headerlink" title="request拦截器"></a>request拦截器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Axios.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        let tickets = localStorage.getItem(&quot;tickets&quot;);</span><br><span class="line">        if (tickets != null &amp;&amp; tickets != &apos;&apos;) &#123;</span><br><span class="line">            config.headers.Authorization = `BasicAuth $&#123;tickets&#125;`;</span><br><span class="line">        &#125;</span><br><span class="line">        return config;</span><br><span class="line">    &#125;, err =&gt; &#123;</span><br><span class="line">        return Promise.reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="response拦截器"><a href="#response拦截器" class="headerlink" title="response拦截器"></a>response拦截器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Axios.interceptors.response.use(</span><br><span class="line">    response =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        return response;</span><br><span class="line">    &#125;, err =&gt; &#123;</span><br><span class="line">        if (err.response.status == 401) &#123;</span><br><span class="line">            Toast.fail(`登录失效，请重新登录`);</span><br><span class="line">            localStorage.removeItem(&quot;tickets&quot;);</span><br><span class="line">            router.push(&apos;/login&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            return Promise.reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>需要注意的是，一开始我把拦截器写在main.js中的最下方，也就是new vue之后，所以造成的后果就是在vue生命周期的create，activated等函数中，拦截器不生效。</p><p>所以最后我把axios提出来，单独作为js，写拦截器后，在main.js中引用封装后的axios</p><p>新建文件夹，axios，目录下新建index.js文件，写入以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import Axios from &apos;axios&apos;</span><br><span class="line"></span><br><span class="line">import &#123; Toast &#125; from &apos;vant&apos;;</span><br><span class="line"></span><br><span class="line">import router from &apos;../router&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Axios.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        let tickets = localStorage.getItem(&quot;tickets&quot;);</span><br><span class="line">        if (tickets != null &amp;&amp; tickets != &apos;&apos;) &#123;</span><br><span class="line">            config.headers.Authorization = `BasicAuth $&#123;tickets&#125;`;</span><br><span class="line">        &#125;</span><br><span class="line">        return config;</span><br><span class="line">    &#125;, err =&gt; &#123;</span><br><span class="line">        return Promise.reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Axios.interceptors.response.use(</span><br><span class="line">    response =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        return response;</span><br><span class="line">    &#125;, err =&gt; &#123;</span><br><span class="line">        if (err.response.status == 401) &#123;</span><br><span class="line">            Toast.fail(`登录失效，请重新登录`);</span><br><span class="line">            localStorage.removeItem(&quot;tickets&quot;);</span><br><span class="line">            router.push(&apos;/login&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            return Promise.reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">export default Axios;</span><br></pre></td></tr></table></figure></p><p>在main.js中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Axios from &apos;./axios&apos;</span><br></pre></td></tr></table></figure></p><p>大功告成。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建一个VUE项目(采用脚手架)</title>
      <link href="2020/03/31/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAVUE%E9%A1%B9%E7%9B%AE-%E9%87%87%E7%94%A8%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>2020/03/31/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAVUE%E9%A1%B9%E7%9B%AE-%E9%87%87%E7%94%A8%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="基本搭建"><a href="#基本搭建" class="headerlink" title="基本搭建"></a>基本搭建</h3><h6 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h6><h6 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h6><p>node.js自带npm，如果版本较低，可专门下载安装</p><h6 id="切换npm源"><a href="#切换npm源" class="headerlink" title="切换npm源"></a>切换npm源</h6><p>由于npm的源在国外，访问很是费劲，此处我们切换成国内的CNPM(淘宝源)，访问流程，据说与npm源有十来分钟的同步差。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>如此我们以后安装插件，用cnpm代替npm</p><h6 id="全局安装vue-cli"><a href="#全局安装vue-cli" class="headerlink" title="全局安装vue-cli"></a>全局安装vue-cli</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue-cli -g</span><br></pre></td></tr></table></figure><h6 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h6><p>webpack是用来编译打包前端的工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install webpack -g</span><br></pre></td></tr></table></figure><h6 id="使用脚手架生成项目"><a href="#使用脚手架生成项目" class="headerlink" title="使用脚手架生成项目"></a>使用脚手架生成项目</h6><p>在项目的目录里运行命令生成项目，这里我的目录为project，生成的项目起名为spatest<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack spatest</span><br></pre></td></tr></table></figure></p><h6 id="运行dev"><a href="#运行dev" class="headerlink" title="运行dev"></a>运行dev</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd spatest</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>浏览器输入提示的ip地址就可以访问了。</p><p>至于这里为什么输入npm run dev就能运行，以及具体的配置，那是webpack的配置了。</p><p>而且这个dev是热运行的，改代码后，立马就会体现在页面上。</p><p>其中我们代码的目录主要是src文件夹下。</p><h3 id="引用vant"><a href="#引用vant" class="headerlink" title="引用vant"></a>引用vant</h3><p>我们写vue项目采用引用外部ui组件库的形式，可以使样式美观，编写便捷。<br>这里我们使用vant</p><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vant --save</span><br></pre></td></tr></table></figure><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><p>安装vant后，在main.js中对vant进行引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Vant from &apos;vant&apos;;</span><br><span class="line">Vue.use(Vant);</span><br></pre></td></tr></table></figure><p>这样我们就可以使用vant了。</p><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>axios使在vue项目时，获取数据的组建，类似我们在jquery中使用的ajax。</p><h6 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure><h6 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h6><p>同样在main.js中我们引用它，然后对它进行一些基本设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Axios from &apos;axios&apos;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//配置axios</span><br><span class="line">Axios.defaults.baseURL = &apos;http://localhost/webapi&apos;;</span><br><span class="line">Vue.prototype.$axios = Axios;</span><br></pre></td></tr></table></figure><p>这里对axios进行了</p><h3 id="路由-Router"><a href="#路由-Router" class="headerlink" title="路由 Router"></a>路由 Router</h3><p>默认脚手架生成的src目录中有router目录，里面有index.js</p><p>我们只需在这个js文件中引用组件，配置路由即可。</p><p>下面示例一个组件的路由配置</p><p>引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import FavoriteCom from &apos;@/components/Favorite/Index&apos;</span><br></pre></td></tr></table></figure></p><p>在router的routes数组中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const router = new Router(&#123;</span><br><span class="line">  //匹配的路由规则</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/favorite&apos;,</span><br><span class="line">      name: &apos;favorite&apos;,</span><br><span class="line">      component: FavoriteCom</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在main.js中引用router<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import router from &apos;./router&apos;</span><br></pre></td></tr></table></figure></p><p>这样我们就可以在其他组件中通过this.$router.push来操作路由了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WebAPI统一异常设置</title>
      <link href="2020/03/31/WebAPI%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E8%AE%BE%E7%BD%AE/"/>
      <url>2020/03/31/WebAPI%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>很简单，两步操作。目前写的比较随意，日后完善。</p><h6 id="继承Expection过滤器"><a href="#继承Expection过滤器" class="headerlink" title="继承Expection过滤器"></a>继承Expection过滤器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">using System.Net;</span><br><span class="line">using System.Net.Http;</span><br><span class="line">using System.Web.Http.Filters;</span><br><span class="line"></span><br><span class="line">namespace IEM.WebAPI_Build.Web.Filters</span><br><span class="line">&#123;</span><br><span class="line">    public class IEMWebAPIExceptionAttribute : ExceptionFilterAttribute</span><br><span class="line">    &#123;</span><br><span class="line">        public override void OnException(HttpActionExecutedContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            context.Response = context.Request.CreateResponse(</span><br><span class="line">                HttpStatusCode.InternalServerError,</span><br><span class="line">                new </span><br><span class="line">                &#123;</span><br><span class="line">                    StatusCode = HttpStatusCode.InternalServerError,</span><br><span class="line">                    Message = context.Exception.Message</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="全局生效过滤器"><a href="#全局生效过滤器" class="headerlink" title="全局生效过滤器"></a>全局生效过滤器</h6><p>WebAPIConfig<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.Filters.Add(new Filters.IEMWebAPIExceptionAttribute());</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WebAPI权限认证实现</title>
      <link href="2020/03/31/WebAPI%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/03/31/WebAPI%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>在WebAPI中，需要对用户权限进行认证。目前IEM系统中主要采用两种方案。</p><h4 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h4><p>Token是我在设计Explore登录的时候，临时采用的一种方案，Explore需要登录跳转，就需要验证身份，一般做法是对客户端身份校验无误后（根据登录状态或者用户名密码传参），在数据库（一般是缓存数据库，例如Redis；由于IEM没有使用Redis，而且访问量也很小，所以我们写在Sql库里）里写一串随机的串，这里采用GUID串，然后设置过期时间和登录时间。</p><p>客户获取这个串后，在Explore登录时，将此串传递即可。IEM后台会检测串的真实性，有效性，然后获得成功的登录状态。</p><p>这个方案当时我们使用Token这个名字。</p><h4 id="Tickets"><a href="#Tickets" class="headerlink" title="Tickets"></a>Tickets</h4><p>Tickets是在设计WebAPI的时候，对于登录状态是需要客户通过用户名密码传递获取的，我们选择不记录在服务器里，而是将用户名和密码进行加密，作为basic认证头，然后客户获取到加密串后，在ajax或axios等异步请求中，在header中将此串加入，每次请求时，客户端进行解析验证。</p><p>具体在WebAPI中的方案以下用代码简要说明。</p><h6 id="权限认证过滤器"><a href="#权限认证过滤器" class="headerlink" title="权限认证过滤器"></a>权限认证过滤器</h6><p>新建权限认证过滤器，继承自AuthorizeAttribute，并重写OnAuthorization方法，在方法里进行基本验证的解析和用户名密码校验，以及过期时间检验，来确认权限。<br>需要注意的是，此处对含有AllowAnonymousAttribute的方法进行放行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public class IEMTicketAuthorizeAttribute : AuthorizeAttribute</span><br><span class="line">&#123;</span><br><span class="line">    public override void OnAuthorization(System.Web.Http.Controllers.HttpActionContext actionContext)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        var authorization = actionContext.Request.Headers.Authorization;</span><br><span class="line">        string errorMessage = &quot;No ticket&quot;;</span><br><span class="line"></span><br><span class="line">        if (actionContext.ActionDescriptor.GetCustomAttributes&lt;AllowAnonymousAttribute&gt;(true).Count != 0</span><br><span class="line">            || actionContext.ActionDescriptor.ControllerDescriptor.GetCustomAttributes&lt;AllowAnonymousAttribute&gt;(true).Count != 0)</span><br><span class="line">        &#123;</span><br><span class="line">            base.OnAuthorization(actionContext);//正确的访问方法</span><br><span class="line">        &#125;</span><br><span class="line">        else if (authorization != null &amp;&amp; authorization.Parameter != null &amp;&amp; ValidateTicket(actionContext.Request, out errorMessage) != null)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            base.IsAuthorized(actionContext);//正确的访问方法</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            actionContext.Response = actionContext.Request.CreateResponse(</span><br><span class="line">                         HttpStatusCode.Unauthorized,</span><br><span class="line">                         new</span><br><span class="line">                         &#123;</span><br><span class="line">                             StatusCode = HttpStatusCode.Unauthorized,</span><br><span class="line">                             Message = $&quot;Unauthorized(&#123;errorMessage&#125;)&quot;</span><br><span class="line">                         &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static ViewModel.LoginUser ValidateTicket(HttpRequestMessage request, out string errorMessage)</span><br><span class="line">    &#123;</span><br><span class="line">        string encryptTicket = request.Headers.Authorization.Parameter;</span><br><span class="line">        errorMessage = string.Empty;</span><br><span class="line">        if (string.IsNullOrEmpty(encryptTicket))</span><br><span class="line">        &#123;</span><br><span class="line">            errorMessage = &quot;The ticket is null&quot;;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        var decryptTicket = FormsAuthentication.Decrypt(encryptTicket);</span><br><span class="line">        //过期时间</span><br><span class="line">        var expiration = decryptTicket.Expiration;</span><br><span class="line">        if (expiration &lt; DateTime.Now)</span><br><span class="line">        &#123;</span><br><span class="line">            errorMessage = &quot;The ticket expired&quot;;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        //用户名和密码</span><br><span class="line">        var strUserName = decryptTicket.Name;</span><br><span class="line">        var strTicket = decryptTicket.UserData;</span><br><span class="line">        var user = Business.DBAppend.User.UserValid(strUserName, strTicket);</span><br><span class="line">        if (user == null)</span><br><span class="line">        &#123;</span><br><span class="line">            errorMessage = $&quot;The user &#123;decryptTicket.Name&#125; has no permission&quot;;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        user.IpAddress = ((System.Web.HttpContextWrapper)request?.Properties[&quot;MS_HttpContext&quot;])?.Request?.UserHostAddress;</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="全局生效过滤器"><a href="#全局生效过滤器" class="headerlink" title="全局生效过滤器"></a>全局生效过滤器</h6><p>在WebAPIConfig中，全局生效过滤器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.Filters.Add(new Filters.IEMTicketAuthorizeAttribute());</span><br></pre></td></tr></table></figure><h6 id="前端请求加Header"><a href="#前端请求加Header" class="headerlink" title="前端请求加Header"></a>前端请求加Header</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: $(&quot;#type&quot;).val(),</span><br><span class="line">    url: $(&quot;#tbUrl&quot;).val(),</span><br><span class="line">    data: dataStr,</span><br><span class="line">    contentType: &quot;application/json;charset=UTF-8&quot;,</span><br><span class="line">    traditional: true,</span><br><span class="line">    beforeSend: function (XHR) &#123; //xhr XML Http Request</span><br><span class="line">        //发送ajax请求之前向http的head里面加入验证信息</span><br><span class="line">        var ticket = $(&quot;#tbTicket&quot;).val();</span><br><span class="line">        if (ticket != &apos;&apos;)</span><br><span class="line">            XHR.setRequestHeader(&apos;Authorization&apos;, &apos;BasicAuth &apos; + ticket);</span><br><span class="line">    &#125;,</span><br><span class="line">    success: function (data1) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    error: function (err) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>前段请求时加Header，这里贴出测试ajax的代码，axios道理一样。 </p><p>每次请求都需要加时，自行通过拦截器来实现。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mac系统下npm全局安装权限问题</title>
      <link href="2020/03/16/mac%E7%B3%BB%E7%BB%9F%E4%B8%8Bnpm%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"/>
      <url>2020/03/16/mac%E7%B3%BB%E7%BB%9F%E4%B8%8Bnpm%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在mac系统下，使用npm -g  安装任何全局都会报权限错误，下面是解决问题方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami) $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>对基于System.ComponentModel.DataAnnotations特性标注的类进行合法性验证</title>
      <link href="2020/03/09/%E5%AF%B9%E5%9F%BA%E4%BA%8ESystem-ComponentModel-DataAnnotations%E7%89%B9%E6%80%A7%E6%A0%87%E6%B3%A8%E7%9A%84%E7%B1%BB%E8%BF%9B%E8%A1%8C%E5%90%88%E6%B3%95%E6%80%A7%E9%AA%8C%E8%AF%81/"/>
      <url>2020/03/09/%E5%AF%B9%E5%9F%BA%E4%BA%8ESystem-ComponentModel-DataAnnotations%E7%89%B9%E6%80%A7%E6%A0%87%E6%B3%A8%E7%9A%84%E7%B1%BB%E8%BF%9B%E8%A1%8C%E5%90%88%E6%B3%95%E6%80%A7%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p>在使用MVC时，我们常使用System.ComponentModel.DataAnnotations的特性来对类的属性进行控制，这里我们写一个自己验证的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void CheckValid(ViewModel._BaseEntity model)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    var context = new ValidationContext(model, null, null);</span><br><span class="line"></span><br><span class="line">    var results = new List&lt;ValidationResult&gt;();</span><br><span class="line">    Validator.TryValidateObject(model, context, results, true);</span><br><span class="line"></span><br><span class="line">    if(results.Count&gt;0)</span><br><span class="line">    &#123;</span><br><span class="line">        throw new Exception(results[0].ErrorMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当属性的值不满足特性约束时，将会抛出异常。</p><h6 id="自定义特性扩展"><a href="#自定义特性扩展" class="headerlink" title="自定义特性扩展"></a>自定义特性扩展</h6><p>DataAnnotations提供的特性有时不能满足我们的需求，所以我们需要自己扩展特性，此处示例扩展特性,标注此特性的string类型，将不可以包含我们所约定的字符，否则会验证不通过。</p><p>要点：重写IsValid(bool)及IsValid(ValidationResult)方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false, Inherited = true)]</span><br><span class="line">   public class NotContainCharsAttribute : ValidationAttribute</span><br><span class="line">   &#123;</span><br><span class="line">       public List&lt;char&gt; notContainsCharList&#123;get; private set;&#125;</span><br><span class="line"></span><br><span class="line">       public NotContainCharsAttribute(string chars)</span><br><span class="line">       &#123;</span><br><span class="line">           notContainsCharList = new List&lt;char&gt;();</span><br><span class="line">           if (!string.IsNullOrEmpty(chars))</span><br><span class="line">           &#123;</span><br><span class="line">               notContainsCharList = chars.ToList();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public override bool IsValid(object value)</span><br><span class="line">       &#123;</span><br><span class="line">           List&lt;char&gt; containsResults = InValidList(Convert.ToString(value));</span><br><span class="line">           return containsResults.Count == 0;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       protected override ValidationResult IsValid(object value, ValidationContext validationContext)</span><br><span class="line">       &#123;</span><br><span class="line">           List&lt;char&gt; containsResults = InValidList(Convert.ToString(value));</span><br><span class="line"></span><br><span class="line">           if (containsResults.Count == 0)</span><br><span class="line">               return ValidationResult.Success;</span><br><span class="line">           else</span><br><span class="line">               return new ValidationResult(string.Format(&quot;字段&#123;0&#125;包含一些非法字符：&#123;1&#125;&quot;, validationContext.DisplayName,string.Join(&quot;&quot;,containsResults.ToArray())), new[] &#123; validationContext.MemberName &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       private List&lt;char&gt; InValidList(string str)</span><br><span class="line">       &#123;</span><br><span class="line">           if (string.IsNullOrEmpty(str) || notContainsCharList.Count == 0) return new List&lt;char&gt;();</span><br><span class="line">         </span><br><span class="line">           return str.ToList().Distinct().Where(c =&gt; notContainsCharList.Contains(c)).Distinct().ToList();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h6 id="WebAPI帮助中显示"><a href="#WebAPI帮助中显示" class="headerlink" title="WebAPI帮助中显示"></a>WebAPI帮助中显示</h6><p>在HelpPage–&gt;ModelDescriptions–&gt;ModelDescriptionGenerator.cs中的IDictionary中添加以下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; typeof(StringNotContainCharsAttribute), a =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        StringNotContainCharsAttribute stringNotContainCharsAttribute = (StringNotContainCharsAttribute)a;</span><br><span class="line">        return String.Format(CultureInfo.CurrentCulture, &quot;String can not contain follow chars: [&#123;0&#125;]&quot;, string.Join(&quot;],[&quot;,stringNotContainCharsAttribute.notContainsCharList));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>即可完成帮助显示。效果如下图</p><p><img src="\images\pasted-sam-107.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用WEBZIP下载站点所有html链接</title>
      <link href="2020/02/28/%E4%BD%BF%E7%94%A8WEBZIP%E4%B8%8B%E8%BD%BD%E7%AB%99%E7%82%B9%E6%89%80%E6%9C%89html%E9%93%BE%E6%8E%A5/"/>
      <url>2020/02/28/%E4%BD%BF%E7%94%A8WEBZIP%E4%B8%8B%E8%BD%BD%E7%AB%99%E7%82%B9%E6%89%80%E6%9C%89html%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>最近WebAPI需要把帮助页面保存到本地，作为脱机浏览。以下截图为webzip使用方法。</p><p><img src="\images\pasted-sam-106.png" alt="upload successful"></p><p>然后执行，即可成功。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IEM.WEBAPI_Build项目权限认证</title>
      <link href="2020/02/26/%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81/"/>
      <url>2020/02/26/%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h3 id="权限认证说明"><a href="#权限认证说明" class="headerlink" title="权限认证说明"></a>权限认证说明</h3><p>在iEM.WebAPI_Build中，除获取Ticket外，任何操作都需要进行权限认证，此处对认证方法做说明。</p><h5 id="获取Ticket"><a href="#获取Ticket" class="headerlink" title="获取Ticket"></a>获取Ticket</h5><p>通过 Tickets 中的API，传入用户名和密码，获取Ticket认证信息，认证通过返回以下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;State&quot;: true,</span><br><span class="line">  &quot;Ticket&quot;: &quot;3E7F70648718064186FB80DEC739D0D96803BD5C8DCA1B5CB96086C371147&quot;,</span><br><span class="line">  &quot;Expire&quot;: &quot;2020-02-26 18:51:53&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>认证失败则返回以下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;State&quot;: false,</span><br><span class="line">  &quot;Ticket&quot;: null,</span><br><span class="line">  &quot;Expire&quot;: &quot;0001-01-01 00:00:00&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Expire代表此ticket过期时间。</p><h6 id="传递ticket完成认证"><a href="#传递ticket完成认证" class="headerlink" title="传递ticket完成认证"></a>传递ticket完成认证</h6><p>在进行API业务请求的时候，将获取的Ticket加入Header传入请求中，如以下示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: &quot;/userapi/users/GetUserByName&quot;,</span><br><span class="line">    beforeSend: function (XHR) &#123; //xhr XML Http Request</span><br><span class="line">        //发送ajax请求之前向http的head里面加入验证信息</span><br><span class="line">        var ticket=&quot;3E7F70648718064186FB80DEC739D0D96803BD5C8DCA1B5CB96086C371147&quot;;</span><br><span class="line">        XHR.setRequestHeader(&apos;Authorization&apos;, &apos;BasicAuth &apos; + ticket);</span><br><span class="line">    &#125;,</span><br><span class="line">    success: function (data) &#123;</span><br><span class="line">        alert(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>如果认证失败，将会抛出异常，异常状态码为401，异常的Json如下格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;StatusCode&quot;: 401,</span><br><span class="line">  &quot;Message&quot;: &quot;Unauthorized(No ticket)&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果认证成功，将会返回正常的业务结果。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WebAPI输出Json格式汇总</title>
      <link href="2020/02/25/WebAPI%E8%BE%93%E5%87%BAJson%E6%A0%BC%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
      <url>2020/02/25/WebAPI%E8%BE%93%E5%87%BAJson%E6%A0%BC%E5%BC%8F%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h5 id="输出Json格式-默认输出XML，Clear-XML"><a href="#输出Json格式-默认输出XML，Clear-XML" class="headerlink" title="输出Json格式(默认输出XML，Clear XML)"></a>输出Json格式(默认输出XML，Clear XML)</h5><p>Global的Start中添加以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GlobalConfiguration.Configuration.Formatters.XmlFormatter.SupportedMediaTypes.Clear();</span><br></pre></td></tr></table></figure></p><h5 id="输出Json默认文本格式缩进"><a href="#输出Json默认文本格式缩进" class="headerlink" title="输出Json默认文本格式缩进"></a>输出Json默认文本格式缩进</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var jsonSerializerSettings = GlobalConfiguration.Configuration.Formatters.JsonFormatter.SerializerSettings;</span><br><span class="line">//Json显示缩进</span><br><span class="line">jsonSerializerSettings.Formatting = Newtonsoft.Json.Formatting.Indented;</span><br></pre></td></tr></table></figure><h5 id="输出Json格式的时间格式化为-yyyy-MM-dd-HH-mm-ss"><a href="#输出Json格式的时间格式化为-yyyy-MM-dd-HH-mm-ss" class="headerlink" title="输出Json格式的时间格式化为 yyyy-MM-dd HH:mm:ss"></a>输出Json格式的时间格式化为 yyyy-MM-dd HH:mm:ss</h5><p>默认输出的时间格式是带T的，通过Global的Start中添加以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var jsonSerializerSettings = GlobalConfiguration.Configuration.Formatters.JsonFormatter.SerializerSettings;</span><br><span class="line"></span><br><span class="line">//时间格式</span><br><span class="line">jsonSerializerSettings.DateFormatString = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用强签名，防止DLL被篡改</title>
      <link href="2020/02/06/%E4%BD%BF%E7%94%A8%E5%BC%BA%E7%AD%BE%E5%90%8D%EF%BC%8C%E9%98%B2%E6%AD%A2DLL%E8%A2%AB%E7%AF%A1%E6%94%B9/"/>
      <url>2020/02/06/%E4%BD%BF%E7%94%A8%E5%BC%BA%E7%AD%BE%E5%90%8D%EF%BC%8C%E9%98%B2%E6%AD%A2DLL%E8%A2%AB%E7%AF%A1%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>在项目开发中，类库（DLL）有时需要防止被篡改，采用以下方案解决。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类库项目--属性--签名--为程序集签名(选中)--新建强名称密匙文件--输入密码</span><br></pre></td></tr></table></figure></p><p>然后重新生成DLL，再需要引用的项目中重新引用。</p><p>此方法可却被调用的DLL不可随意篡改替换。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>.Net Framework版本升级提示Microsoft.CSharp.RuntimeBinder.Binder错误</title>
      <link href="2020/01/09/Net-Framework%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E6%8F%90%E7%A4%BAMicrosoft-CSharp-RuntimeBinder-Binder%E9%94%99%E8%AF%AF/"/>
      <url>2020/01/09/Net-Framework%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E6%8F%90%E7%A4%BAMicrosoft-CSharp-RuntimeBinder-Binder%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>在.Net Framework从3.5升级4.0版本后，在Win7或早期Windows版本上运行，可能报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">预定义的类型“Microsoft.CSharp.RuntimeBinder.Binder”未定义或未导入</span><br></pre></td></tr></table></figure></p><p>经过查询是因为缺少dll引用，解决方法有两个</p><h6 id="第一种方法-推荐"><a href="#第一种方法-推荐" class="headerlink" title="第一种方法(推荐)"></a>第一种方法(推荐)</h6><p>在项目文件(.csproj)的ItemGroup节点加入如下代码，重启项目。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Reference Include=&quot;Microsoft.CSharp&quot; /&gt;</span><br></pre></td></tr></table></figure></p><h6 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h6><p>手动引用如下DLL，以4.0项目为例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\Microsoft.CSharp.dll</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#获取当前运行环境(X86 X64)</title>
      <link href="2020/01/09/C-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83-X86-X64/"/>
      <url>2020/01/09/C-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83-X86-X64/</url>
      
        <content type="html"><![CDATA[<p>在读取写入注册表时，64位的操作系统对32位程序做了特殊处理，32位程序只能读取和写入WOW6432Node节点，所以我们有时需要判断当前程序是以32位编译环境运行还是64位。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Environment.Is64BitProcess</span><br></pre></td></tr></table></figure></p><p>返回bool型。</p><p>需要注意的是，此方法验证的是调用程序的运行环境。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#获取命名空间</title>
      <link href="2020/01/03/C-%E8%8E%B7%E5%8F%96%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
      <url>2020/01/03/C-%E8%8E%B7%E5%8F%96%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>在C#程序中，我们常常需要获取当前类的命名空间，如果是一个实体类，那么获取方法很简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.GetType().Namespace</span><br></pre></td></tr></table></figure></p><p>如果是一个静态类，那么就需要通过自身的调用方法来获取方法所在的命名空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.Namespace</span><br></pre></td></tr></table></figure></p><p>The End.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#创建带有命名空间的XML节点/属性</title>
      <link href="2020/01/01/C-%E5%88%9B%E5%BB%BA%E5%B8%A6%E6%9C%89%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84XML%E8%8A%82%E7%82%B9-%E5%B1%9E%E6%80%A7/"/>
      <url>2020/01/01/C-%E5%88%9B%E5%BB%BA%E5%B8%A6%E6%9C%89%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84XML%E8%8A%82%E7%82%B9-%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>在最近的项目中，需要创建XML文档，在这些格式的XML文档中，有的节点或属性是有命名空间的，此处记录一下带有命名空间的XML节点或属性的创建。</p><p>先看XML示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns:PB=&quot;urn:osisoft-com-pb&quot; xmlns:PBI=&quot;urn:osisoft-com-interface&quot;&gt;</span><br><span class="line">  &lt;PBI:Symbol name=&quot;Polygon1_MS&quot;/&gt;</span><br><span class="line">  &lt;g id=&quot;GROUP3&quot; PB:IsMultiState=&quot;False&quot; PB:Type=&quot;0&quot; PB:Visible=&quot;True&quot;&gt;</span><br><span class="line">  &lt;/g&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure></p><p>上述示例中，根节点中定义了PB和PBI的命名空间，在子节点中,Symbol的节点是一个带有命名空间的节点，而g节点中，含有PB:IsMultiState等带有命名空间的属性。</p><p>下面记录代码片段</p><h6 id="定义命名空间常量"><a href="#定义命名空间常量" class="headerlink" title="定义命名空间常量"></a>定义命名空间常量</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public const string PB = &quot;urn:osisoft-com-pb&quot;;</span><br><span class="line">public const string PBI = &quot;urn:osisoft-com-interface&quot;;</span><br></pre></td></tr></table></figure><h6 id="根节点中定义命名空间"><a href="#根节点中定义命名空间" class="headerlink" title="根节点中定义命名空间"></a>根节点中定义命名空间</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svgEle.SetAttribute(&quot;xmlns:PB&quot;, PINS.PB);</span><br><span class="line">svgEle.SetAttribute(&quot;xmlns:PBI&quot;, PINS.PBI);</span><br></pre></td></tr></table></figure><h6 id="创建带有命名空间的节点"><a href="#创建带有命名空间的节点" class="headerlink" title="创建带有命名空间的节点"></a>创建带有命名空间的节点</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XmlElement stateEle = xmlDoc.CreateElement(&quot;PB&quot;, &quot;MSState&quot;, PINS.PB);</span><br></pre></td></tr></table></figure><h6 id="创建带有命名空间的属性"><a href="#创建带有命名空间的属性" class="headerlink" title="创建带有命名空间的属性"></a>创建带有命名空间的属性</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XmlElement polygonEle = xmlDoc.CreateElement(&quot;test&quot;);</span><br><span class="line">polygonEle.SetAttribute(&quot;Type&quot;, PINS.PB, PB_Type);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SqlServer2012及更高版本分页</title>
      <link href="2020/01/01/SqlServer2012%E5%8F%8A%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E5%88%86%E9%A1%B5/"/>
      <url>2020/01/01/SqlServer2012%E5%8F%8A%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>在Sqlserver2008及以前，我们通过ROW_NUMBER()的方法来分页，在Sqlserver2012中提供了Offset与Fetch Next … Rows only，所以我们可以使用这种方法分页。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from IEMModels ORDER by ModelID OFFSET ((2-1)*10) ROWS FETCH next 10 rows only</span><br></pre></td></tr></table></figure></p><p>同样，多表联查也是可以的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM IEMModels m JOIN IEMModelAlarmResult a ON m.ModelID=a.ModelID ORDER by a.ModelResultID OFFSET ((2-1)*10) ROWS FETCH next 10 rows only</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#数字ToString()</title>
      <link href="2019/11/22/C-%E6%95%B0%E5%AD%97ToString/"/>
      <url>2019/11/22/C-%E6%95%B0%E5%AD%97ToString/</url>
      
        <content type="html"><![CDATA[<h6 id="整数前面补0"><a href="#整数前面补0" class="headerlink" title="整数前面补0"></a>整数前面补0</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i.ToString().PadLeft(3,&apos;0&apos;);</span><br></pre></td></tr></table></figure><p>3代表一共3位。</p><h6 id="保留有效数字"><a href="#保留有效数字" class="headerlink" title="保留有效数字"></a>保留有效数字</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.ToString(&quot;0.###&quot;);</span><br></pre></td></tr></table></figure><p>几个井号就是保留几位</p><p>0不保留   例如保留三位  98.7   而不会是98.700</p><h6 id="保留小数"><a href="#保留小数" class="headerlink" title="保留小数"></a>保留小数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.ToString(&quot;f3&quot;);</span><br></pre></td></tr></table></figure><p>0保留   例如保留三位  98.700   而不会是98.7</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#索引器</title>
      <link href="2019/11/18/C-%E7%B4%A2%E5%BC%95%E5%99%A8/"/>
      <url>2019/11/18/C-%E7%B4%A2%E5%BC%95%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>在C#中，索引器允许类或结构的实例就像数组一样进行索引。</p><p>这里我们引用MSDN对索引器的概述：</p><ul><li>使用索引器可以用类似于数组的方式为对象建立索引。</li><li>get 取值函数返回值。 set 取值函数分配值。</li><li>this 关键字用于定义索引器。</li><li>value 关键字用于定义 set 索引器所赋的值。</li><li>索引器不必根据整数值进行索引；由你决定如何定义特定的查找机制。</li><li>索引器可被重载。</li><li>索引器可以有多个形参，例如当访问二维数组时。</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>同样，这里我们直接引用MSDN提供的实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">class SampleCollection&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">   // Declare an array to store the data elements.</span><br><span class="line">   private T[] arr = new T[100];</span><br><span class="line"></span><br><span class="line">   // Define the indexer to allow client code to use [] notation.</span><br><span class="line">   public T this[int i]</span><br><span class="line">   &#123;</span><br><span class="line">      get &#123; return arr[i]; &#125;</span><br><span class="line">      set &#123; arr[i] = value; &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">   static void Main()</span><br><span class="line">   &#123;</span><br><span class="line">      var stringCollection = new SampleCollection&lt;string&gt;();</span><br><span class="line">      stringCollection[0] = &quot;Hello, World&quot;;</span><br><span class="line">      Console.WriteLine(stringCollection[0]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">// The example displays the following output:</span><br><span class="line">//       Hello, World.</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#扩展方法</title>
      <link href="2019/11/18/C-%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/"/>
      <url>2019/11/18/C-%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="扩展方法概述"><a href="#扩展方法概述" class="headerlink" title="扩展方法概述"></a>扩展方法概述</h4><p>扩展方法是C#里非常好用的一种语法糖，其主要作用在于在类外对类进行扩展。</p><p>例如基于IEnumerable实现的类，在引用Linq后，会有很多本身不存在的方法，这是在Linq中进行扩展的方法。</p><h4 id="扩展方法实例"><a href="#扩展方法实例" class="headerlink" title="扩展方法实例"></a>扩展方法实例</h4><h6 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h6><p>这里示例一个IEM项目中基本的扩展方法，是对System.DateTime的扩展。</p><p>在IEM项目中，DateTime的输出格式一律被要求为”yyyy-MM-dd HH:mm:ss”，所以我们在对DateTime进行Tostring的时候，总是需要输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DateTime.Now.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br></pre></td></tr></table></figure></p><p>此处，我们对System.DateTime进行一下扩展。</p><h6 id="建立静态类和方法"><a href="#建立静态类和方法" class="headerlink" title="建立静态类和方法"></a>建立静态类和方法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 这里需要静态类</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public static class DateTimeExt</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 需要静态方法</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;time&quot;&gt;参数要以this开头&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    public static string ToIEMString(this DateTime time)</span><br><span class="line">    &#123;</span><br><span class="line">        return time.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们对DateTime编写一个扩展方法，叫ToIEMString，直接调用这个方法就可以获取我们的默认格式。</p><h6 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h6><p>调用方法很简单，该类型的参数可以直接调用，如同调用类中本身的方法一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DateTime.Now.ToIEMString()</span><br></pre></td></tr></table></figure></p><p>需要注意的是，如果不在同一个命名空间下，需要进行引用。</p><p>这样我们就完成了对类的一个扩展。</p>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IIS调用COM组件的权限问题</title>
      <link href="2019/11/12/IIS%E8%B0%83%E7%94%A8COM%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"/>
      <url>2019/11/12/IIS%E8%B0%83%E7%94%A8COM%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>IIS无法访问COM组件一般是权限问题，一般按照以下步骤即可解决</p><h6 id="DCOM设置"><a href="#DCOM设置" class="headerlink" title="DCOM设置"></a>DCOM设置</h6><p>运行命令dcomcnfg打开组件服务窗口。</p><p>展开组件服务–&gt;计算机—&gt;我的电脑—-&gt;DCOM配置，找到相应的组件</p><p>右击属性，安全标签下的三个选项都选择自定义，然后编辑，分别添加NETWORK SERVICE用户。</p><p>然后在点击标识标签，选择交互式用户</p><h6 id="IIS应用程序池设置"><a href="#IIS应用程序池设置" class="headerlink" title="IIS应用程序池设置"></a>IIS应用程序池设置</h6><p>打开应用程序池高级设置，将标识选项修改为LocalSystem，如果还是不行，就改为自定义输入管理员账户密码。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WEBAPI POST [FromBody] 后台无法接收参数的问题</title>
      <link href="2019/11/12/WEBAPI-POST-FromBody-%E5%90%8E%E5%8F%B0%E6%97%A0%E6%B3%95%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2019/11/12/WEBAPI-POST-FromBody-%E5%90%8E%E5%8F%B0%E6%97%A0%E6%B3%95%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在WEBAPI（MVC）中，POST方法碰到后台无法接收参数的问题，现将此问题记录。</p><h3 id="Ajax传Json对象时"><a href="#Ajax传Json对象时" class="headerlink" title="Ajax传Json对象时"></a>Ajax传Json对象时</h3><p>前台代码先看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var dataStr = $(&quot;#tbDatax&quot;).val();</span><br><span class="line">//将字符串转化为JSON格式</span><br><span class="line">var data = $.parseJSON(dataStr);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: $(&quot;#type&quot;).val(),</span><br><span class="line">    url: $(&quot;#tbUrl&quot;).val(),</span><br><span class="line">    data: data,</span><br><span class="line">    dataType: &quot;json&quot;,</span><br><span class="line">    traditional: true,</span><br><span class="line">    success: function (data1) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    error: function (err) &#123;</span><br><span class="line">        alert(err.status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>如上代码所示，这种方法直接传递Json对象，在这种情况下，后台获取不到参数的情况有以下几种：</p><h6 id="传递简单类型"><a href="#传递简单类型" class="headerlink" title="传递简单类型"></a>传递简单类型</h6><p>假设后台的FromBody参数为简单类型（string,int,string[]）等，如下代码所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[HttpPost]</span><br><span class="line">[Route(&quot;Test&quot;)]</span><br><span class="line">public IHttpActionResult Test([FromBody]string str)</span><br><span class="line">&#123;</span><br><span class="line">    throw new Exception();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>经测试，全部无法获取。</p><p>解决方案：将简单类型封装成类，然后用类操作。</p><h6 id="模型属性无访问修饰"><a href="#模型属性无访问修饰" class="headerlink" title="模型属性无访问修饰"></a>模型属性无访问修饰</h6><p>先看代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    [HttpPost]</span><br><span class="line">    [Route(&quot;Test&quot;)]</span><br><span class="line">    public IHttpActionResult Test([FromBody]TestModel model)</span><br><span class="line">    &#123;</span><br><span class="line">        throw new Exception();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    //下面是类</span><br><span class="line">public class TestModel</span><br><span class="line">&#123;</span><br><span class="line">    public string str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>经测试，无法获取。</p><p>解决方案：TestModel类的属性，增加修饰符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class TestModel</span><br><span class="line">&#123;</span><br><span class="line">    //增加get,set修饰符</span><br><span class="line">    public string str &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="模型属性为自定义类"><a href="#模型属性为自定义类" class="headerlink" title="模型属性为自定义类"></a>模型属性为自定义类</h6><p>且看模型定义代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class TestModel</span><br><span class="line">&#123;</span><br><span class="line">    public string str &#123; get; set; &#125;</span><br><span class="line">    //属性非简单类型，而是一个自定义类</span><br><span class="line">    public ChildModel childModel &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ChildModel</span><br><span class="line">&#123;</span><br><span class="line">    public string strChild &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>经测试，childModel的strChild属性无法获得。</p><p>解决方案：目前我不会解决。</p><p>由上得出结论，传递对象不仅麻烦，关键是有无法解决的问题，所以就需要找其他方法。那么问题来了，找什么方法呢？经过调研，传字符串，并设置ContentType可以有效解决以上问题。具体原因就不表了，跟Jq定义有关。</p><h3 id="传递字符串，并设置ContentType"><a href="#传递字符串，并设置ContentType" class="headerlink" title="传递字符串，并设置ContentType"></a>传递字符串，并设置ContentType</h3><p>前台代码一览<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var dataStr = $(&quot;#tbDatax&quot;).val();</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: $(&quot;#type&quot;).val(),</span><br><span class="line">    url: $(&quot;#tbUrl&quot;).val(),</span><br><span class="line">    data: dataStr,</span><br><span class="line">    //注意此处设置contentType</span><br><span class="line">    contentType: &quot;application/json;charset=UTF-8&quot;,</span><br><span class="line">    traditional: true,</span><br><span class="line">    success: function (data1) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    error: function (err) &#123;</span><br><span class="line">        alert(err.status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>如上代码所示，设置contentType，然后传递字符串。</p><p>简单类型可以传递了(string记得加上双引号)。</p><p>后台模型属性没有定义访问修饰符也可以解析了。</p><p>模型属性为自定义类也可以解析了。</p><p>世界忽然安静了，也不那么烦躁了，你说气人不？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Winform集成DLL到exe中</title>
      <link href="2019/11/08/Winform%E9%9B%86%E6%88%90DLL%E5%88%B0exe%E4%B8%AD/"/>
      <url>2019/11/08/Winform%E9%9B%86%E6%88%90DLL%E5%88%B0exe%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>在Winform中，有时会用到一些动态链接库（DLL）。有时由于是小工具，为了方便，想将这些DLL集成到EXE中。</p><p>原理简单的说，就是将DLL嵌入到资源中，然后引用DLL时禁止复制到本地，然后绑定AssemblyResolve事件，这样程序在找不到程序集的时候就会触发事件，根据代码从资源中动态调用。</p><p>需要注意的是，如果是在windows service中，不仅要在program中添加事件，在projectInstaller中也要添加事件。</p><p>具体步骤如下</p><h6 id="项目中添加一个文件夹，将DLL都放到这个文件夹里。"><a href="#项目中添加一个文件夹，将DLL都放到这个文件夹里。" class="headerlink" title="项目中添加一个文件夹，将DLL都放到这个文件夹里。"></a>项目中添加一个文件夹，将DLL都放到这个文件夹里。</h6><p><img src="\images\pasted-sam-101.png" alt="upload successful"></p><p>这里文件夹我起名叫Lib</p><h6 id="设置这些DLL的生成操作属性为嵌入的资源。"><a href="#设置这些DLL的生成操作属性为嵌入的资源。" class="headerlink" title="设置这些DLL的生成操作属性为嵌入的资源。"></a>设置这些DLL的生成操作属性为嵌入的资源。</h6><p><img src="\images\pasted-sam-104.png" alt="upload successful"></p><h6 id="引用这些DLL，并在引用里设置复制到本地属性为False。"><a href="#引用这些DLL，并在引用里设置复制到本地属性为False。" class="headerlink" title="引用这些DLL，并在引用里设置复制到本地属性为False。"></a>引用这些DLL，并在引用里设置复制到本地属性为False。</h6><p><img src="\images\pasted-sam-105.png" alt="upload successful"></p><h6 id="在Program-cs中添加AssemblyResolve事件。"><a href="#在Program-cs中添加AssemblyResolve事件。" class="headerlink" title="在Program.cs中添加AssemblyResolve事件。"></a>在Program.cs中添加AssemblyResolve事件。</h6><p>编写CurrentDomain_AssemblyResolve函数，并在Main()方法里，绑定事件。</p><p>注意在事件中，设置resourceName时，文件夹要写为放DLL的文件夹，这里我是Lib文件夹。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">static class Program</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 应用程序的主入口点。</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    [STAThread]</span><br><span class="line">    static void Main()</span><br><span class="line">    &#123;</span><br><span class="line">        //增加AssemblyResolve事件</span><br><span class="line">        AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;</span><br><span class="line">        Application.EnableVisualStyles();</span><br><span class="line">        Application.SetCompatibleTextRenderingDefault(false);</span><br><span class="line">        Application.Run(new Form1());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// AssemblyResolve事件</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;args&quot;&gt;&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)</span><br><span class="line">    &#123;</span><br><span class="line">        String resourceName = System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.Namespace + &quot;.Lib.&quot; + new AssemblyName(args.Name).Name + &quot;.dll&quot;;</span><br><span class="line">        using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName))</span><br><span class="line">        &#123;</span><br><span class="line">            Byte[] assemblyData = new Byte[stream.Length];</span><br><span class="line">            stream.Read(assemblyData, 0, assemblyData.Length);</span><br><span class="line">            return Assembly.Load(assemblyData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Serv-U搭建FTP-SFTP等服务器</title>
      <link href="2019/10/24/%E4%BD%BF%E7%94%A8Serv-U%E6%90%AD%E5%BB%BAFTP-SFTP%E7%AD%89%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2019/10/24/%E4%BD%BF%E7%94%A8Serv-U%E6%90%AD%E5%BB%BAFTP-SFTP%E7%AD%89%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>1.打开Serv-U</p><p>2.点击导航旁边的+按钮，新建域</p><p>3.依次输入名称、描述—-域类型—-根目录—-FTP/SFTP/HTTP等是否启用及端口号—–IP地址，即可部署成功。</p><p><img src="\images\pasted-sam-100.png" alt="upload successful"></p><p>需要注意的是Serv-U的注册码输入地址是在以下地址输入的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">全局---服务器详细信息---许可证信息---输入授权ID</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows Server 2016 安装IIS报错</title>
      <link href="2019/10/23/Windows-Server-2016-%E5%AE%89%E8%A3%85IIS%E6%8A%A5%E9%94%99/"/>
      <url>2019/10/23/Windows-Server-2016-%E5%AE%89%E8%A3%85IIS%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>在Windows Server 2016安装IIS的时候，报错，错误的主要信息是找不到源文件(The source file could not be found)，经过排查，主要是安装.Net Framework 3.5缺少源。</p><p>解决方案：</p><p>加载安装镜像，安装时手动指定源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Sources\sxs</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>远程连接Mysql报错</title>
      <link href="2019/10/18/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Mysql%E6%8A%A5%E9%94%99/"/>
      <url>2019/10/18/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Mysql%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>Mysql安装成功后，远程访问Mysql，提示错误。</p><p>使用navicat连接，提示XXX is not allowed to connect this MySQL</p><p>查询后，问题在于Mysql库中相应的User没有权限。</p><p>解决方案</p><p>1.CMD命令通过Mysql客户端连接登陆root<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></p><p>然后输入密码；</p><p>2.使用Mysql库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user mysql;</span><br></pre></td></tr></table></figure></p><p>3.查询用户权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,host from user;</span><br></pre></td></tr></table></figure></p><p><img src="\images\pasted-sam-102.png" alt="upload successful"></p><p>4.添加用户权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to 用户名@&apos;IP地址或机器名&apos; identified by &apos;密码&apos;;</span><br></pre></td></tr></table></figure></p><p>需要注意的是这里的IP地址指的是想要访问Mysql服务器的客户端的IP或机器名，并不是服务器的IP。</p><p>如果想让所有机器都可以通过这个用户名访问Mysql，这里的IP设置为 %  </p><p>建议开发的时候，设置为 %   这样所有机器都可以访问</p><p>5.重建权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p><p>6.再次查询用户权限，确认是否成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,host from user;</span><br></pre></td></tr></table></figure></p><p><img src="\images\pasted-sam-103.png" alt="upload successful"><br>我们可以看到，已对CRTsoft-yanyong这台机器添加相应权限，再通过此电脑访问，已经可以访问成功。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Agile-BPM调研-项目试用</title>
      <link href="2019/10/17/Agile-BPM%E8%B0%83%E7%A0%94-%E9%A1%B9%E7%9B%AE%E8%AF%95%E7%94%A8/"/>
      <url>2019/10/17/Agile-BPM%E8%B0%83%E7%A0%94-%E9%A1%B9%E7%9B%AE%E8%AF%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="用户组织"><a href="#用户组织" class="headerlink" title="用户组织"></a>用户组织</h4><p>使用管理员账户登陆Agile-BPM，点击用户组织标签，可以看到有三个菜单，分别为用户管理、组织管理、角色管理。</p><p><img src="\images\pasted-sam-92.png" alt="upload successful"></p><p>其中用户管理作用为管理用户，对用户基本的增删改查。</p><p>组织管理的作用为管理组织，组织是树结构，组织中可加入和移除用户。Agile-BPM中的用户可以隶属于多个组织。</p><p>角色管理可添加不同角色，可对角色分配用户。其中菜单的资源权限就是在角色中分配的。</p><p>我们本次试用添加用户组织角色的目的是为了在流程中使用。</p><h4 id="流程和表单"><a href="#流程和表单" class="headerlink" title="流程和表单"></a>流程和表单</h4><p>建立一个流程的步骤主要分为以下几步，官网称之为流程实施三部曲</p><p>建立实体并通过实体建立对象</p><p>通过对象建立表单</p><p>建立流程，并对流程全局或分布设置已建立的表单</p><h5 id="表单管理"><a href="#表单管理" class="headerlink" title="表单管理"></a>表单管理</h5><h6 id="业务实体"><a href="#业务实体" class="headerlink" title="业务实体"></a>业务实体</h6><p>业务实体就是数据库中的表，我们可以建立多个表，然后在业务对象将这些实体表关联起来，组成一个大的结构。这个结构就是我们流程中的主体对象。<br>具体在表单管理–业务实体菜单中，可以建立表，以及表里相应的字段，字段可设置字段类型和在Form中呈现方式。</p><p>此处我们任意建立一个数据库，流程的目的在于用户上传一个文件，然后管理员查看文件并进行批注，上传批注后的文件，然后返回第一个用户，用户接收后，流程结束。</p><p><img src="\images\pasted-sam-94.png" alt="upload successful"></p><h6 id="业务对象"><a href="#业务对象" class="headerlink" title="业务对象"></a>业务对象</h6><p>业务对象是用来建立对象，将对个实体表结合起来，组成一个对象，其中包含了实体表的关系。</p><p>其中一对一，将会在实体下面紧跟子实体，是一对有的关系。</p><p>一对多，将会在一个实体下面，跟一个子实体的列表，子实体可以增加删除，子实体为数组格式。</p><p>我们本次实例只有一个实体，所以建立业务对象，选择此实体即可。</p><h6 id="业务表单"><a href="#业务表单" class="headerlink" title="业务表单"></a>业务表单</h6><p>业务表单，即将建立好的业务对象，做成表单，表单的排列有多种格式。单列，双列，三列等。</p><p>表单可以分配权限，可设置每个表单对于每个角色（组织或用户），是否必填、只读还是可编辑，我们在流程中通常每个步骤对于表单的控制是不同的，例如第一步必填某文本框，第二步可以不填；第一步可以编辑某文本框，第二步却只能查看；等等。</p><p>还有一种情况是流程的每一步对于表单显示可能不同，可能第一步有两个文本框，第二步有完整的所有文本框，等等；</p><p>所以我们可以在一个流程中，添加多个表单，并分配不同的权限，在流程的每一步分别引用不同的表单。</p><p>此处我添加了3个表单，分别分配了可编辑权限。</p><p><img src="\images\pasted-sam-95.png" alt="upload successful"><br>上图为表单列表</p><p><img src="\images\pasted-sam-96.png" alt="upload successful"><br>上图为表单排列</p><p><img src="\images\pasted-sam-97.png" alt="upload successful"><br>上图为表单权限分配</p><h5 id="流程管理"><a href="#流程管理" class="headerlink" title="流程管理"></a>流程管理</h5><p>在流程管理–流程列表页面，新增一个流程</p><p>首先在右侧选择业务对象，然后选择全局表单，然后在流程图主视图画相应的流程图，再对每一步进行用户选择，相关事件创建，这样一个流程图就完成了。</p><p>下面我们用图形的方式，来分别呈现全局设置，和针对每个流程节点的设置。</p><h6 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h6><p><img src="\images\pasted-sam-98.png" alt="upload successful"></p><h6 id="单步配置"><a href="#单步配置" class="headerlink" title="单步配置"></a>单步配置</h6><p><img src="\images\pasted-sam-99.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Agile-BPM调研-环境部署</title>
      <link href="2019/10/17/Agile-BPM%E8%B0%83%E7%A0%94-%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
      <url>2019/10/17/Agile-BPM%E8%B0%83%E7%A0%94-%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><h5 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h5><p>AlileBPM要求Mysql版本在5.6以上，此处我安装的5.7，安装配置方法在上一篇文章里。</p><h5 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h5><p>安装JDK8，并配置环境变量。</p><p>环境变量的配置方法：</p><p>打开一下目录和标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算机----属性----高级系统设置---高级----环境变量</span><br></pre></td></tr></table></figure></p><p>在系统变量中，点击新建按钮，输入JDK的安装根目录，命名为JAVA_HOME</p><p><img src="\images\pasted-sam-70.png" alt="upload successful"></p><p>点击Path—编辑，新建一条记录，目录为JDK安装目录的Bin目录（在WIN7或早期windows版本中，Path编辑页面并不是一个列表，需要手动添加分号写在字符串的最后面）</p><p><img src="\images\pasted-sam-71.png" alt="upload successful"></p><h5 id="eclipse与Server（tomcat）"><a href="#eclipse与Server（tomcat）" class="headerlink" title="eclipse与Server（tomcat）"></a>eclipse与Server（tomcat）</h5><h6 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a>eclipse</h6><p>官网下载eclipse，选择develop for java，安装。</p><p>打开eclipse，配置工作空间</p><p><img src="\images\pasted-sam-72.png" alt="upload successful"></p><p>点击launch，至此，eclipse安装完成。</p><h6 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h6><p>打开eclipse，点击菜单栏Help–Install New Software…，打开插件安装界面。<br>在插件安装界面点击Add，Name中任意输入源名称，Location中输入源地址，点击Add按钮。<br>此处我使用的location中，201909代表eclipse的版本号，可在Help–About中查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://download.eclipse.org/releases/2019-09</span><br></pre></td></tr></table></figure></p><p><img src="\images\pasted-sam-74.png" alt="upload successful"></p><p>然后在加载出来的列表中，选择Web,XML, Java EE and OSGi Enterprise Development，然后选择下一步，然后一路Next并接受，然后eclipse右下角会有安装进度，等待安装完成，可能需要很久。</p><p><img src="\images\pasted-sam-75.png" alt="upload successful"></p><p><img src="\images\pasted-sam-76.png" alt="upload successful"></p><p>安装完成后，重启eclipse，菜单栏点击window–preferences打开选项页面，在左侧菜单中有Server选项，即安装成功。</p><p><img src="\images\pasted-sam-77.png" alt="upload successful"></p><h6 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h6><p>按顺序点击如下菜单（选项），打开运行环境配置界面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Window--Preferences---Server---Runtime Environments</span><br></pre></td></tr></table></figure></p><p>点击Add，选择Apache目录下的Apache Tomcat v7.0，并点击Next</p><p><img src="\images\pasted-sam-78.png" alt="upload successful"></p><p>在下一步的目录中，选择download and install（如果已安装，直接选择路径）</p><p><img src="\images\pasted-sam-79.png" alt="upload successful"></p><p>然后选择一个安装目录，等待下载完成后点击Finish</p><p><img src="\images\pasted-sam-80.png" alt="upload successful"></p><p>至此，基本环境已搭建完成</p><h4 id="部署AligeBPM源码"><a href="#部署AligeBPM源码" class="headerlink" title="部署AligeBPM源码"></a>部署AligeBPM源码</h4><h5 id="项目篇"><a href="#项目篇" class="headerlink" title="项目篇"></a>项目篇</h5><h6 id="Clone项目"><a href="#Clone项目" class="headerlink" title="Clone项目"></a>Clone项目</h6><p>打开eclipse，点击右侧的git按钮（如果没有就在Quick Access文本框中输入git，然后选择Git-Perspective…），然后在git页面点击clone按钮，然后输入AgileBPM的git地址，点击Next</p><p><img src="\images\pasted-sam-82.png" alt="upload successful"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/agile-bpm/agile-bpm-basic.git</span><br></pre></td></tr></table></figure><p>然后右下角会有Cloning的进度，等待clone完成。</p><h6 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h6><p>在git界面刚克隆好的项目上，右键选择Import Project，然后打开导入界面，选择Finish。</p><p><img src="\images\pasted-sam-83.png" alt="upload successful"></p><p>同样，右下角会有导入进度，等待导入完成。</p><h6 id="Update-Project"><a href="#Update-Project" class="headerlink" title="Update Project"></a>Update Project</h6><p>点击右侧的Java按钮，打开Project Explorer界面，我们可以看到已导入的项目，然后右键点击项目，选择Maven–Update Project，打开更新项目界面，然后选择完成。</p><p><img src="\images\pasted-sam-84.png" alt="upload successful"></p><p>然后静待右下角更新进度完成。</p><h5 id="数据库篇"><a href="#数据库篇" class="headerlink" title="数据库篇"></a>数据库篇</h5><h6 id="建立数据库"><a href="#建立数据库" class="headerlink" title="建立数据库"></a>建立数据库</h6><p>打开Mysql的管理器，这里我用的是Navicat，连接Mysql，然后新建数据库。这里我建立的名字叫testbpm.</p><p>右击建立好的数据库，选择运行SQL文件，然后找到git下载的项目目录的doc–mysql，按顺序执行create文件夹和datainit文件夹下的1-7个sql，进行创建表和初始化数据。</p><p><img src="\images\pasted-sam-85.png" alt="upload successful"></p><h6 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h6><p>在eclipse的项目中，选择<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web---java resources---src/main/resources---properties---app-dev.properties</span><br></pre></td></tr></table></figure></p><p>打开配置文件，配置Mysql的Driver，地址，库，用户名，密码。注意Driver按图中配置</p><p><img src="\images\pasted-sam-91.png" alt="upload successful"></p><p>保存。</p><h5 id="Server篇"><a href="#Server篇" class="headerlink" title="Server篇"></a>Server篇</h5><h6 id="配置Server"><a href="#配置Server" class="headerlink" title="配置Server"></a>配置Server</h6><p>在Quick Access文本框中输入Server，选择View中的Servers</p><p><img src="\images\pasted-sam-87.png" alt="upload successful"></p><p>将Server显示在工作区中。</p><p>在Server工作区中点击新建Server，选择Apache的Tomcat7.0，然后选择Finish</p><p><img src="\images\pasted-sam-88.png" alt="upload successful"></p><p>此时工作区中已出现Tomcat服务器。</p><p>右键Tomcat服务器，选择Add and Remove，打开管理界面。然后选择左侧的web，添加到右侧，选择Finish。</p><p><img src="\images\pasted-sam-89.png" alt="upload successful"></p><p>双击Tomcat服务器，选择Modules，点击Add External Web Module，添加外部模板，然后选择项目下的bpm-explorer文件夹，并将path写为/bpm-explorer，点击OK添加，如下图所示：</p><p><img src="\images\pasted-sam-90.png" alt="upload successful"></p><p>至此，Server配置完成。</p><h6 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h6><p>在Server区，右键Tomcat服务器，点击Start，然后静待Tomcat启动，直到启动完成，在浏览器输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/bpm-explorer</span><br></pre></td></tr></table></figure></p><p>即可成功访问项目。</p><p>需要注意的是，如果因为8080端口被占用，那么需要关闭原8080端口，或者在Tomcat安装目录的conf文件夹下，server.xml中的connector属性中，更改tomcat的端口即可。</p><p><img src="\images\pasted-sam-86.png" alt="upload successful"></p><h4 id="仅从Tomcat部署生产环境"><a href="#仅从Tomcat部署生产环境" class="headerlink" title="仅从Tomcat部署生产环境"></a>仅从Tomcat部署生产环境</h4><p>如果仅需要从生产环境部署，而不需要开发环境，那么按照以下步骤操作。</p><h5 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h5><p>安装JDK并设置环境变量</p><h5 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h5><p>下载Tomcat并解压</p><p>在系统高级设置中新建变量，名称为CATALINA_HOME，路径为解压根目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CATALINA_HOME=D:\PortableDevelop\Tomcat</span><br></pre></td></tr></table></figure></p><p>对Path变量进行编辑，新建以下路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%CATALINA_HOME%\lib</span><br><span class="line">%CATALINA_HOME%\lib\servlet-api.jar</span><br><span class="line">%CATALINA_HOME%\lib\jsp-api.jar</span><br></pre></td></tr></table></figure></p><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><h6 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h6><p>在开发环境中，右键web项目–Run as– maven build…，在Goals输入Package，然后点击run。</p><h6 id="复制文件到tomcat"><a href="#复制文件到tomcat" class="headerlink" title="复制文件到tomcat"></a>复制文件到tomcat</h6><p>在web文件夹下的target中，找到agile-bpm-platform.war文件，将此文件复制到Tomcat的webapps文件夹下；</p><p>将项目中的bpm-explorer(前端文件夹)也复制到webapps文件夹下；</p><h6 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h6><p>在tomcat解压目录的bin文件夹下，执行startup.bat即可启动tomcat。</p><p>tomcat启动时，如果发现war包，会自动解压到同名目录，如果存在同名目录，将不会解压。所以我们将agile-bpm-platform.war复制到webapps中，首次启动tomcat时，会自动解压，请耐心等待。</p><h6 id="修改数据库配置"><a href="#修改数据库配置" class="headerlink" title="修改数据库配置"></a>修改数据库配置</h6><p>tomcat启动解压后，会在webapps中产生agile-bpm-platform目录，如果需要修改数据配置，打开以下文件，修改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">agile-bpm-platform\WEB-INF\classes\properties\app-dev.properties</span><br></pre></td></tr></table></figure></p><p>修改后重启tomcat即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql zip版安装配置方法</title>
      <link href="2019/10/17/Mysql-zip%E7%89%88%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
      <url>2019/10/17/Mysql-zip%E7%89%88%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h6 id="下载Mysql-zip版本"><a href="#下载Mysql-zip版本" class="headerlink" title="下载Mysql zip版本"></a>下载Mysql zip版本</h6><p>通过此网址下载Mysql 5.7版本的zip包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dev.mysql.com/downloads/mysql/5.7.html#downloads</span><br></pre></td></tr></table></figure></p><p><img src="\images\pasted-sam-65.png" alt="upload successful"></p><p>下载后，将其解压到一个目录下</p><h6 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h6><p>配置环境变量的作用是在cmd命令行中，任何目录下都可以访问mysql，此处我没有配置，需要的话可以在系统设置的系统变量的Path中进行配置，目录配置为Mysql解压目录的Bin文件夹即可。</p><h6 id="配置ini"><a href="#配置ini" class="headerlink" title="配置ini"></a>配置ini</h6><p>将以下配置项目复制到文本文件中，并命名为my.ini，然后放在Mysql的解压目录下（与bin文件夹同级）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">#log</span><br><span class="line">general-log=0</span><br><span class="line">log-output=FILE</span><br><span class="line">slow-query-log=1</span><br><span class="line">long_query_time=1</span><br><span class="line">slow_query_log_file=&quot;D:\PortableDevelop\mysql\log\log_slow.log&quot;</span><br><span class="line">log_error=&quot;D:\PortableDevelop\mysql\log_err.log&quot;</span><br><span class="line"></span><br><span class="line">#开启查询缓存</span><br><span class="line">explicit_defaults_for_timestamp=true</span><br><span class="line"># 设置3306端口</span><br><span class="line">port = 3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=D:\PortableDevelop\mysql</span><br><span class="line"># 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span><br><span class="line">datadir=D:\PortableDevelop\mysql\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=1000</span><br><span class="line">max_user_connections=500</span><br><span class="line"># Set the SQL mode to strict</span><br><span class="line">sql_mode=NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line"># 服务端使用的字符集默认为utf8字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure></p><p><img src="\images\pasted-sam-66.png" alt="upload successful"></p><h6 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h6><p>用管理员身份打开cmd，然后切换到mysql解压目录的bin文件夹下（配置环境变量的不用切换目录），然后输入以下命令，并执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure></p><p><img src="\images\pasted-sam-67.png" alt="upload successful"></p><p>执行成功后，会自动为root分配一个初始密码，格式是这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A temporary password is generated for root@localhost:BQ;;X1037</span><br></pre></td></tr></table></figure></p><p>root@localhost:后面的就是初始密码，把它记录下来，之后登陆会用（重要！）</p><h6 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h6><p>依然在以上cmd窗口，相同目录下，输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --install MysqlService</span><br></pre></td></tr></table></figure></p><p>命令中的MysqlService是自定义的服务名称，此处我定义为此名，可随意定义。<br>执行后，服务就安装完成了。<br>然后在cmd中使用命令，或者到服务管理页面手动启动服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start MysqlService</span><br></pre></td></tr></table></figure></p><h6 id="登录Mysql修改密码"><a href="#登录Mysql修改密码" class="headerlink" title="登录Mysql修改密码"></a>登录Mysql修改密码</h6><p>依然在以上cmd窗口，相同目录下，输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></p><p>然后输入之前的初始密码，即可登录。</p><p>登录成功后，输入以下命令修改密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;新密码&apos;;</span><br></pre></td></tr></table></figure></p><h6 id="使用管理器查看Mysql"><a href="#使用管理器查看Mysql" class="headerlink" title="使用管理器查看Mysql"></a>使用管理器查看Mysql</h6><p>这里我使用Navicat，点连接—Mysql，然后输入连接信息（默认本机localhost，默认端口号3306），即可建立Mysql连接。然后可通过管理器管理用户和表等信息。</p><p><img src="\images\pasted-sam-68.png" alt="upload successful"></p><p><img src="\images\pasted-sam-69.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HJ/T212调研及模拟测试</title>
      <link href="2019/10/10/HJ-T212%E8%B0%83%E7%A0%94%E5%8F%8A%E6%A8%A1%E6%8B%9F%E6%B5%8B%E8%AF%95/"/>
      <url>2019/10/10/HJ-T212%E8%B0%83%E7%A0%94%E5%8F%8A%E6%A8%A1%E6%8B%9F%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是HJ-T212"><a href="#什么是HJ-T212" class="headerlink" title="什么是HJ/T212"></a>什么是HJ/T212</h4><p>HJ/212是为贯彻《中华人民共和国环境保护法》，指导污染源在线自动监控（监测）<br>系统的建设，规范数据传输，保证各种环境监控监测仪器设备、传输网络和环保<br>部门应用软件系统之间的连通，制定的标准。 </p><p>协议全称为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">污染源在线自动监控（监测）系统数据传输标准</span><br></pre></td></tr></table></figure></p><h4 id="协议组成"><a href="#协议组成" class="headerlink" title="协议组成"></a>协议组成</h4><p><img src="\images\pasted-sam-55.png" alt="upload successful"></p><p>简单而言就是</p><p>##&lt;4位长度&gt;&lt;数据段落，例如(QN=XXXXX,ST=XX,CP=&amp;&amp;&amp;&amp;)等&gt;&lt;CRC校验码&gt;&lt;\r\n&gt;</p><p>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##0094QN=20191010090503340;ST=32;CN=9011;PW=000000;MN=000000000000000000001111;Flag=0;CP=&amp;&amp;QnRtn=1&amp;&amp;B401</span><br></pre></td></tr></table></figure></p><p>具体数据段格式，以及CRC校验码计算方法，参见协议PDF。</p><h4 id="模拟环境测试"><a href="#模拟环境测试" class="headerlink" title="模拟环境测试"></a>模拟环境测试</h4><h5 id="安装虚拟串口工具"><a href="#安装虚拟串口工具" class="headerlink" title="安装虚拟串口工具"></a>安装虚拟串口工具</h5><p>打开文件夹里的虚拟串口工具(vspd.exe)，并安装，安装后打开，以试用模式运行</p><p><img src="\images\pasted-sam-56.png" alt="upload successful"></p><p>点击 Add pair，Vitual ports中将会出现两个COM端口。</p><h5 id="打开串口调试工具"><a href="#打开串口调试工具" class="headerlink" title="打开串口调试工具"></a>打开串口调试工具</h5><p>运行串口调试工具(AccessPort.exe)</p><p><img src="\images\pasted-sam-57.png" alt="upload successful"></p><p>按图中设置，默认配置项即可，然后选择串口，然后点击确定。</p><p>此时可看到虚拟串口工具的相应串口已经有了设备。</p><h5 id="212测试"><a href="#212测试" class="headerlink" title="212测试"></a>212测试</h5><h6 id="串口设置"><a href="#串口设置" class="headerlink" title="串口设置"></a>串口设置</h6><p>打开212测试工具（HJ212TestClient.exe），如果提示错误，请先安装随包附带的Access数据库环境（AccessDatabaseEngine.exe），然后进入测试界面。<br>打开系统设置—串口参数设置，打开串口</p><p><img src="\images\pasted-sam-58.png" alt="upload successful"></p><h6 id="通信测试"><a href="#通信测试" class="headerlink" title="通信测试"></a>通信测试</h6><p>下面我们进行一次通信测试，以协议中的获取现场机时间为例。</p><p>点击菜单栏的  参数命令—设备时间，打开设备时间界面，然后点击设备时间按钮，然后点击解析报文标签，我们可以看到已经发出的命令。</p><p><img src="\images\pasted-sam-60.png" alt="upload successful"></p><p><img src="\images\pasted-sam-61.png" alt="upload successful"></p><p>从解析报文控制台中，我们可以看到，上位机（测试工具）向现场机（串口调试工具）发送的报文，是由上文提到过的格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##0087QN=xxxx.....2700</span><br></pre></td></tr></table></figure></p><p>其中，2700代表CRC校验码，后面的\r\n没有显示出来，实际是存在的。</p><p>下面我们切换到串口调试工具，看看收到的报文。</p><p><img src="\images\pasted-sam-62.png" alt="upload successful"></p><p>我们可以看到，报文已收到。</p><p>下面我们用现场机(串口调试工具)给上位机（测试工具）发送信息，按照协议PDF中，发送请求应答信息。<br>在串口调试工具的发送栏里输入以下命令，点击发送数据，注意不要丢掉最后的\r\n(回车符)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##0094QN=20191010160147823;ST=32;CN=9011;PW=000000;MN=000000000000000000001111;Flag=0;CP=&amp;&amp;QnRtn=1&amp;&amp;1980</span><br></pre></td></tr></table></figure><p>切换到现场机，我们可以看到已经收到报文，并解析成功。注意如果解析失败时，可以根据控制台的信息，查看失败原因。</p><p><img src="\images\pasted-sam-63.png" alt="upload successful"></p><p>同理，我们继续用现场机发送数据，以及返回执行结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##0112QN=20191010160147823;ST=32;CN=1011;PW=000000;MN=000000000000000000001111;Flag=5;CP=&amp;&amp;SystemTime=20191010091305&amp;&amp;C0C1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##0095QN=20191010160147823;ST=32;CN=9012;PW=000000;MN=000000000000000000001111;Flag=0;CP=&amp;&amp;ExeRtn=1&amp;&amp;A3C1</span><br></pre></td></tr></table></figure><p><img src="\images\pasted-sam-64.png" alt="upload successful"></p><p>以上即是212通信模拟测试的一次实验，至于CRC校验码的计算方法，数据段各字段的含义，在212协议的PDF中均有体现，我们在以后使用时，进行详细的研究。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rapid Scada插件调研</title>
      <link href="2019/09/27/Rapid-Scada%E6%8F%92%E4%BB%B6%E8%B0%83%E7%A0%94/"/>
      <url>2019/09/27/Rapid-Scada%E6%8F%92%E4%BB%B6%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<p>在Rapid scada中，除了基本功能外，官方还提供了一些插件，当然开发者也可以根据需求自行开发插件。在安装完整版scada时，已经默认安装了一些免费插件，其他插件需通过配置页自行下载安装。</p><h5 id="默认安装插件"><a href="#默认安装插件" class="headerlink" title="默认安装插件"></a>默认安装插件</h5><p>登陆rapid scada web站点，点击Main Menu中的Plugins–&gt;Installed，我们可以看到已安装的插件，如图示</p><p><img src="\images\pasted-sam-44.png" alt="upload successful"></p><p>我们可以看到，默认安装了chart，tables，schemes等一系列插件，有了这些插件，我们就可以加载出对应的view了，例如图形scheme，表格table，趋势图chart等。</p><h5 id="下载安装插件"><a href="#下载安装插件" class="headerlink" title="下载安装插件"></a>下载安装插件</h5><p>点击Download节点，可看到提供下载的插件，有收费的，也有免费的，有Rapid官方的，也有个人开发的。</p><p><img src="\images\pasted-sam-45.png" alt="upload successful"></p><p>我们以Chart Pro为例，点击More Info，然后下载解压，放在对应的web目录下后，即可在web站点的Installed中看到这款插件了，点击Active，即可激活它。</p><p>但由于这款插件是收费的，我们需要现在Registration中购买注册，然后在Configuration中，就可以选择默认的图标插件。</p><p><img src="\images\pasted-sam-46.png" alt="upload successful"></p><h5 id="部分插件示例"><a href="#部分插件示例" class="headerlink" title="部分插件示例"></a>部分插件示例</h5><p>下面附上默认安装的，或收费的部分插件介绍及示例图。</p><h6 id="schemes"><a href="#schemes" class="headerlink" title="schemes"></a>schemes</h6><p>默认已安装</p><p>免费</p><p>此插件是用于显示图形的，默认已安装此插件及编辑器，在使用中已提及过。</p><p><img src="\images\pasted-sam-47.png" alt="upload successful"></p><h6 id="tables"><a href="#tables" class="headerlink" title="tables"></a>tables</h6><p>默认已安装</p><p>免费</p><p>此插件是用来显示表格的，默认已安装此插件及编辑器，在使用中同样已提及过。</p><p><img src="\images\pasted-sam-48.png" alt="upload successful"></p><h6 id="chart"><a href="#chart" class="headerlink" title="chart"></a>chart</h6><p>默认已安装</p><p>免费</p><p>此插件是用来显示趋势图的，默认在表格中，点击测点名称，会弹出测点趋势。</p><p><img src="\images\pasted-sam-49.png" alt="upload successful"></p><h6 id="chart-pro"><a href="#chart-pro" class="headerlink" title="chart pro"></a>chart pro</h6><p>需自行下载安装</p><p>收费</p><p>此插件是chart的升级版，具有更多的功能，因为获取不到试用码，我也没有试过，仅从demo中图形截图。应该支持多测点等功能。</p><p><img src="\images\pasted-sam-50.png" alt="upload successful"></p><h6 id="map"><a href="#map" class="headerlink" title="map"></a>map</h6><p>需自行下载安装</p><p>收费</p><p>此插件是一个功能强大的map插件，可通过配置将需要的地点显示在地图上，并可以显示设备详情。</p><p><img src="\images\pasted-sam-51.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rapid Scada安装与使用</title>
      <link href="2019/09/25/Rapid-Scada%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>2019/09/25/Rapid-Scada%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Scada"><a href="#什么是Scada" class="headerlink" title="什么是Scada"></a>什么是Scada</h3><p>SCADA(Supervisory Control And Data Acquisition)系统，即数据采集与监视控制系统。SCADA系统是以计算机为基础的DCS与电力自动化监控系统</p><h3 id="Rapid-Scada"><a href="#Rapid-Scada" class="headerlink" title="Rapid Scada"></a>Rapid Scada</h3><p>Rapid Scada是一款开源的，功能强大的，使用人数广泛的SCADA系统。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h6 id="1-系统组件安装"><a href="#1-系统组件安装" class="headerlink" title="1.系统组件安装"></a>1.系统组件安装</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开  控制面版--&gt;程序和功能---&gt;启用和关闭windows功能</span><br></pre></td></tr></table></figure><p><img src="\images\pasted-sam-10.png" alt="upload successful"></p><p>注：未安装.NET Framework 4.7以上版本的，需要下载安装。<br>Internet Information Services(IIS)尽量安装所有需要的插件。</p><h6 id="2-Rapid-Scada安装包安装"><a href="#2-Rapid-Scada安装包安装" class="headerlink" title="2.Rapid Scada安装包安装"></a>2.Rapid Scada安装包安装</h6><p>在Rapid官网下载Rapid Scada安装包，然后执行ScadaSetup.exe，按步骤安装即可。(安装过程中需要设置一个IIS站点，按需求选择即可)。</p><h6 id="3-重启电脑"><a href="#3-重启电脑" class="headerlink" title="3.重启电脑"></a>3.重启电脑</h6><p>然后打开localhost中设置的IIS站点（此处我选择default站点，localhost/scada），即可进入登陆页面，输入用户名和密码： Admin  12345  即可访问默认的Scada显示界面，里面提供的是官方默认demo.可正常登录，证明安装成功。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h5><p>打开安装目录中的ScadaAdmin管理程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Scada\ScadaAdmin\ScadaAdmin.exe</span><br></pre></td></tr></table></figure></p><p>新建项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File--&gt;New Project</span><br></pre></td></tr></table></figure></p><p><img src="\images\pasted-sam-11.png" alt="upload successful"></p><p>Template选择默认的即可，输入项目名称和地址，按OK进行创建。</p><h5 id="目录概览"><a href="#目录概览" class="headerlink" title="目录概览"></a>目录概览</h5><p>如下图我们可以看到，在Rapid Scada的项目中，配置目录如图中所示，主节点分为三个，分别为</p><p>配置存储数据库：所有的配置信息都存在这里，此处可以配置用户、<br>权限、设备信息、驱动等一切信息。</p><p>交互接口配置 ：通过此接口可以新建交互接口用于网页端显示，例如新建图形文件，图标文件等。</p><p>实例配置：这里可以图形化配置信息，包括服务器信息，通信信息，web站点信息等。</p><p><img src="\images\pasted-sam-12.png" alt="upload successful"></p><h5 id="配置设备相关信息"><a href="#配置设备相关信息" class="headerlink" title="配置设备相关信息"></a>配置设备相关信息</h5><h6 id="新建Communicator-Line"><a href="#新建Communicator-Line" class="headerlink" title="新建Communicator Line"></a>新建Communicator Line</h6><p>点击工具栏的Add Line按钮，或者在左侧树节点的Instance–&gt;Communicator–&gt;Communication Lines右键点击Add Line，新建一条通信Line。如图所示</p><p><img src="\images\pasted-sam-13.png" alt="upload successful"></p><p>节点下将会出现一条新Line，如图示：</p><p><img src="\images\pasted-sam-14.png" alt="upload successful"></p><p>点击Line Parameters配置参数信息，此处此条Line我们设定为OPCLine（使用MatrikonOPC Server模拟数据，可通过相关官方下载），名称设定为OPCTest。Communication Channel的Type是用来配置通信类型，里面包含TCP，UDP，串口等配置，此处我们用OPC模拟数据，所以不用配置。</p><p><img src="\images\pasted-sam-15.png" alt="upload successful"></p><h6 id="新建设备"><a href="#新建设备" class="headerlink" title="新建设备"></a>新建设备</h6><p>点击工具栏的Add Device按钮，打开新建设备界面，配置设备名称，Type（OPC）等信息。</p><p><img src="\images\pasted-sam-16.png" alt="upload successful"></p><p>点击OK后，在Commication Lines的OPCTest中就会出现相应的设备了。</p><p><img src="\images\pasted-sam-17.png" alt="upload successful"></p><p>右击此设备，点击Properties，可打开设备属性界面（因为是OPC设备，会调用OPC连接）。具体配置及步骤按图所示。</p><p><img src="\images\pasted-sam-18.png" alt="upload successful"></p><p>配置好以后，点击工具栏的Upload Configuration生效配置，然后双击设备，即可看到配置的两组测点了。测点数据实时在刷新，证明本次配置成功。</p><p><img src="\images\pasted-sam-19.png" alt="upload successful"></p><h6 id="分配channels"><a href="#分配channels" class="headerlink" title="分配channels"></a>分配channels</h6><p>点击工具栏菜单的Tools—&gt;Create Channels，打开新建channels配置界面。</p><p>1.选择Line和Device，分别选择我们刚才新建的Line和Device。并点击next</p><p><img src="\images\pasted-sam-20.png" alt="upload successful"></p><p>2.选择object，选择默认的Enterprise。并点击next</p><p><img src="\images\pasted-sam-22.png" alt="upload successful"></p><p>3.选择input channels的开始号码，默认101开始，点击create即可创建成功</p><p><img src="\images\pasted-sam-23.png" alt="upload successful"></p><p>点击工具栏的Upload Configuration生效配置，然后双击设备，即可看到设备已分配channel号</p><p><img src="\images\pasted-sam-24.png" alt="upload successful"></p><p>至此，分配channels已成功设置。</p><h6 id="使用数据库作为数据源"><a href="#使用数据库作为数据源" class="headerlink" title="使用数据库作为数据源"></a>使用数据库作为数据源</h6><p>上面描述了OPC设备的配置，如果使用数据库（MSSQL,ORACLE等）作为数据源时，仅需新建一个Line，然后新建设备，设备Type选择为DB Import。</p><p><img src="\images\pasted-sam-39.png" alt="upload successful"></p><p>然后在Line中找到配置，点击Properties，选择数据库类型，设置数据连接串。</p><p><img src="\images\pasted-sam-40.png" alt="upload successful"></p><p>然后在Data Retrieval标签中设置sql脚本即可。</p><p><img src="\images\pasted-sam-41.png" alt="upload successful"></p><p>需要注意的是，这里的脚本应该查询到的信息是列名为测点名，行数据为值的格式，如果不是此类格式，自行行列转置，例如下图格式</p><p><img src="\images\pasted-sam-42.png" alt="upload successful"></p><p>参考sql脚本如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">MAX(case tagname when &apos;655915&apos; then DataValue else NULL END) as &apos;655915&apos;,</span><br><span class="line">MAX(case tagname when &apos;655916&apos; then DataValue else NULL END) as &apos;655916&apos;,</span><br><span class="line">MAX(case tagname when &apos;655917&apos; then DataValue else NULL END )as &apos;655917&apos;,</span><br><span class="line">MAX(case tagname when &apos;655918&apos; then DataValue else NULL END) as &apos;655918&apos;,</span><br><span class="line">MAX(case tagname when &apos;655919&apos; then DataValue else NULL END) as &apos;655919&apos;</span><br><span class="line">from TagConfig</span><br></pre></td></tr></table></figure></p><p>配置生效后，即可看到数据了。</p><p><img src="\images\pasted-sam-43.png" alt="upload successful"></p><h5 id="实时导出数据"><a href="#实时导出数据" class="headerlink" title="实时导出数据"></a>实时导出数据</h5><p>在Rapid scada中，提供了数据实时导出功能，此处我们以sql server为例，进行数据实时导出。</p><p>双击左侧节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Instances--&gt;default---&gt;Modules</span><br></pre></td></tr></table></figure></p><p>打开模板配置，双击ModDBExport激活导出模板。</p><p><img src="\images\pasted-sam-32.png" alt="upload successful"></p><p>然后点击ModDBExport，点击Properties，打开属性界面，新建MSSql，然后配置sql信息</p><p><img src="\images\pasted-sam-33.png" alt="upload successful"></p><p>在connection中配置基本信息，然后点击Current Data标签，点击Export，然后输入导出脚本，即可导出。</p><p><img src="\images\pasted-sam-34.png" alt="upload successful"></p><p>此处我设置的脚本为，如果存在即更新值，否则插入。参数分别为@CNLNUM,@DATETIME,@VAL,@STAT，代表channel号，时间，值，状态。脚本参考如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">IF EXISTS(SELECT * FROM TESTOPCDATA WHERE CNLNUM=@CNLNUM)  </span><br><span class="line">begin </span><br><span class="line">update TESTOPCDATA set TimeStamp=@DATETIME,value=@VAL,state=@STAT where CNLNUM=@CNLNUM</span><br><span class="line"> end</span><br><span class="line"> else</span><br><span class="line"> begin</span><br><span class="line">insert into TESTOPCDATA (TimeStamp,CNLNUM,VALUE,STATE) values (@DATETIME,@CNLNUM,@VAL,@STAT) </span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>点击Upload configuration后，即可生效，我们看到数据库中，已经自动插入值，并且值在不断刷新。</p><p><img src="\images\pasted-sam-36.png" alt="upload successful"></p><h5 id="配置交互相关信息"><a href="#配置交互相关信息" class="headerlink" title="配置交互相关信息"></a>配置交互相关信息</h5><h6 id="新建图"><a href="#新建图" class="headerlink" title="新建图"></a>新建图</h6><p>在Interface节点右击<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New File--&gt;Scheme View</span><br></pre></td></tr></table></figure></p><p>即可新建一个Scheme view，双击新建的sch文件，即可打开scheme editor编辑图形。<br>如图所示，左侧为chrome打开的预览界面，右侧为工具栏。</p><p><img src="\images\pasted-sam-25.png" alt="upload successful"></p><p>此处简单建立一个图形。<br>点击Static Picture（静态图形），然后点击在预览画布上，即可出现一个图形框架。然后点击properties，设置此图形的属性。</p><p><img src="\images\pasted-sam-26.png" alt="upload successful"></p><p>点击image属性，选择图片。此处我随意用windows自带画图软件画了一个设备样例图。</p><p>预览画布上可以调整图形大小。</p><p><img src="\images\pasted-sam-28.png" alt="upload successful"></p><p>然后新建两个Dynamic Text（动态文字），分别放在tag1和tag2下面，属性中设置他们的channel，用来显示它们的值。</p><p><img src="\images\pasted-sam-29.png" alt="upload successful"></p><p>保存。</p><h6 id="新建表格"><a href="#新建表格" class="headerlink" title="新建表格"></a>新建表格</h6><p>与新建图形类似，在Interface上右击建立table view，建立表格。<br>双击新建的表格，打开表格编辑器，左侧为设备列表，右侧为表格，在设备列表中找到相应的测点双击即可添加到右侧的表格中。</p><p><img src="\images\pasted-sam-30.png" alt="upload successful"></p><p>保存。</p><h5 id="配置Interface显示"><a href="#配置Interface显示" class="headerlink" title="配置Interface显示"></a>配置Interface显示</h5><p>左侧节点配置数据库中，找到Interface<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Configuration Database---&gt;System----&gt;Interface</span><br></pre></td></tr></table></figure></p><p>新建两行，选择刚配置的图形与表格，并写上title，然后保存。</p><p><img src="\images\pasted-sam-31.png" alt="upload successful"></p><p>如需树的格式，需先建立一个文件夹，然后紧接着建立文件夹下的文件，即可实现。</p><p><img src="\images\pasted-sam-53.png" alt="upload successful"></p><p>子节点又有子节点</p><p><img src="\images\pasted-sam-54.png" alt="upload successful"></p><p>此时，大功告成。点击Upload Configuration按钮生效配置后，重启IIS，登录web站点，即可看到配置的相关信息了。</p><p><img src="\images\pasted-sam-37.png" alt="upload successful"></p><p><img src="\images\pasted-sam-38.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#清除Excel公式/公式数组，保留值</title>
      <link href="2019/07/26/C-%E6%B8%85%E9%99%A4Excel%E5%85%AC%E5%BC%8F-%E5%85%AC%E5%BC%8F%E6%95%B0%E7%BB%84%EF%BC%8C%E4%BF%9D%E7%95%99%E5%80%BC/"/>
      <url>2019/07/26/C-%E6%B8%85%E9%99%A4Excel%E5%85%AC%E5%BC%8F-%E5%85%AC%E5%BC%8F%E6%95%B0%E7%BB%84%EF%BC%8C%E4%BF%9D%E7%95%99%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>近来有个需求，需要使用程序将excel中的公式清除，保留值。使用spire.xls，一来收费，二来获取到的值为上次打开excel的公式值，并不是现更新的值（此处因为收费也没有花时间研究），使用npoi，貌似并不能准确的获取数组公式，最后还是使用Microsoft.Office.Interop.Excel的COM+组件。</p><p>大体思路是循环含有公式的单元格，如果是普通公式，就保留值替换，如果是公式数组，就找到此公式数组的Range，然后保留值替换，并递归重新循环含有公式的单元格（因为替换清除该Range的公式数组后，一开始的集合已变，需要重新遍历）。</p><p>代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public void ClearFormula(_Worksheet _wsh)</span><br><span class="line">&#123;</span><br><span class="line">    //如果指定worksheet中不含有公式，则直接返回</span><br><span class="line">    if (_wsh.Cells.HasFormula.ToString() == &quot;False&quot;) return;</span><br><span class="line"></span><br><span class="line">    //循环worksheet中的公式单元格</span><br><span class="line">    foreach (var cell in _wsh.Cells.SpecialCells(XlCellType.xlCellTypeFormulas, 23))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Range range = cell as Range;</span><br><span class="line"></span><br><span class="line">        //如果为单公式</span><br><span class="line">        if (range.HasArray.ToString() == &quot;False&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            //选取该单元格，包含已合并的单元格</span><br><span class="line">            Range singleRange = range.MergeArea;</span><br><span class="line">            //清除公式并赋值</span><br><span class="line">            object text = singleRange.Value2;</span><br><span class="line">            singleRange.ClearContents();</span><br><span class="line">            singleRange.Value2 = text;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果为数组公式</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            //选取该数组区域</span><br><span class="line">            Range arrayRange = range.CurrentArray;</span><br><span class="line"></span><br><span class="line">            //清除数组区域，并按数组赋值</span><br><span class="line">            object text = arrayRange.Value2;</span><br><span class="line">            arrayRange.ClearContents();</span><br><span class="line">            arrayRange.Value2 = text;</span><br><span class="line"></span><br><span class="line">            //清除公式数组后，worksheet已发生改变，部分之前为数组公式的单元格已非公式，所以递归调用，重新设定集合</span><br><span class="line">            ClearFormula(_wsh);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InfluxDB备份与还原</title>
      <link href="2019/07/05/InfluxDB%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/"/>
      <url>2019/07/05/InfluxDB%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/</url>
      
        <content type="html"><![CDATA[<h5 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h5><p>启动cmd窗口，切换到influxDB目录下，运行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influxd backup -database %dbname% %bakpath%</span><br></pre></td></tr></table></figure></p><p>将上述命令的%dbname%替换为需要备份的数据库名称，%bakpath%替换为备份到的目录</p><p>假如要备份test数据库，到当前目录的influxdb_backup目录下，输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influxd backup -database test ./influxdb_backup</span><br></pre></td></tr></table></figure></p><p>静待备份完成。</p><h5 id="还原数据库"><a href="#还原数据库" class="headerlink" title="还原数据库"></a>还原数据库</h5><p>这里暂时只讨论要还原的数据库不存在的情况</p><p>启动cmd窗口，切换到influxDB目录下，运行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influxd restore -database %dbname% -metadir %md% -datadir %dd% %bakpath%</span><br></pre></td></tr></table></figure></p><p>将上述命令中%dbname%替换为数据库名称，%md%替换为meta的路径，%dd%替换为data的路径，%bakpath%替换为备份的数据库文件路径。</p><p>meta路径和data路径在conf文件中可以找到，如果启动influxDB时没有用conf文件加载（即使用默认conf）加载influxDB，可先在安装目录的操作命令下，运行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influxd config &gt; default.conf</span><br></pre></td></tr></table></figure></p><p>将conf存起来，打开default.confi，查找到其meta和data目录。<br>一般情况下，默认的data和meta目录为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\登录名\.influxdb\data</span><br><span class="line">C:\Users\登录名\.influxdb\meta</span><br></pre></td></tr></table></figure></p><p>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influxd restore -database test -metadir C:\Users\whitebn\.influxdb\meta -datadir C:\Users\whitebn\.influxdb\data ./influxdb_backup</span><br></pre></td></tr></table></figure></p><p>还原完成后，重启influxd服务，即可查看新还原的数据库。</p>]]></content>
      
      
      
        <tags>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis初体验</title>
      <link href="2019/06/26/Redis%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>2019/06/26/Redis%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>Redis是当下著名的Nosql(key-value)数据库，</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>同样有多种安装方式，鉴于上次influxDB的经验，这次直接选择了绿色版进行安装。</p><p>下载地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/MSOpenTech/redis/releases</span><br></pre></td></tr></table></figure></p><p>下载X64的windows版本，为zip文件，将其中内容解压到D盘redis文件夹下，即安装完成。</p><h5 id="运行服务端"><a href="#运行服务端" class="headerlink" title="运行服务端"></a>运行服务端</h5><p>新建一个cmd窗口，切换到redis目录下，执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure></p><p>即可启动redis服务端。</p><h5 id="运行操作端"><a href="#运行操作端" class="headerlink" title="运行操作端"></a>运行操作端</h5><p>保持以上Redis服务端窗口不关闭，另开cmd，同样切换到redis目录下</p><p>连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure></p><p>设置键值对<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set 11c0401.11abc 0.33754</span><br></pre></td></tr></table></figure></p><p>获取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get 11c0401.11abc</span><br><span class="line">&quot;0.33754&quot;</span><br></pre></td></tr></table></figure></p><p>至此，一个简单的redis服务启动、连接、写入、读取操作已完成。</p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Influxdb初体验</title>
      <link href="2019/06/21/Influxdb%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>2019/06/21/Influxdb%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>多种安装方式，开始尝试用docker安装，后决定用默认绿色版做调研，下载后，解压到任意目录即可。</p><h4 id="运行服务端"><a href="#运行服务端" class="headerlink" title="运行服务端"></a>运行服务端</h4><p>打开cmd，切换到influxdb安装目录，执行influxd.exe，即可运行influxdb服务端</p><h4 id="运行操作端"><a href="#运行操作端" class="headerlink" title="运行操作端"></a>运行操作端</h4><p>服务端命令窗口保持不动，另开cmd窗口，切换到influxdb安装目录，执行influx.exe，即可运行命令端。</p><h4 id="Influxdb中的名词"><a href="#Influxdb中的名词" class="headerlink" title="Influxdb中的名词"></a>Influxdb中的名词</h4><table><thead><tr><th>名词</th><th>描述</th></tr></thead><tbody><tr><td>Database</td><td>数据库，与传统数据库类似</td></tr><tr><td>Measurement</td><td>类似传统数据库中的表，这里的表结构并不需要创建，插入数据时，会自动创建</td></tr><tr><td>Point</td><td>类似传统数据库中的行</td></tr><tr><td>-</td><td>-</td></tr><tr><td>Time</td><td>每一行都有时间，视为主键</td></tr><tr><td>Tags</td><td>含有索引的字段，现阶段我理解为联合主键</td></tr><tr><td>Field</td><td>不含索引的字段，主要是记录值</td></tr></tbody></table><h4 id="运行命令与测试"><a href="#运行命令与测试" class="headerlink" title="运行命令与测试"></a>运行命令与测试</h4><h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><h6 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Show users</span><br></pre></td></tr></table></figure><p>即可查看当前用户，默认是没有用户的</p><h6 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &quot;sam&quot; with password ‘crtsoft’ with all privileges</span><br></pre></td></tr></table></figure><h6 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Drop user “sam”</span><br></pre></td></tr></table></figure><h6 id="使用用户登录"><a href="#使用用户登录" class="headerlink" title="使用用户登录"></a>使用用户登录</h6><p>默认配置是不需要用户登录的，所以启动服务时，只要ip和端口正确就可以访问。如果需要权限验证，则进行如下操作：</p><p>1.按上述创建用户方法创建一个管理员用户</p><p>2.将influxdb服务的默认配置保存起来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influxd config &gt; default.conf</span><br></pre></td></tr></table></figure></p><p>3.更改default.conf中的内容，开启用户认证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[http]</span><br><span class="line">auth-enabled = true</span><br></pre></td></tr></table></figure></p><p>4.用这个配置文件启动influxDB<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influxd -config default.conf</span><br></pre></td></tr></table></figure></p><p>5.另起cmd，用之前方法默认访问时，会发生如下错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERR: authorization failed</span><br><span class="line">Warning: It is possible this error is due to not setting a database.</span><br><span class="line">Please set a database with the command &quot;use &lt;database&gt;&quot;.</span><br></pre></td></tr></table></figure></p><p>这就是权限验证失败了，需要用用户名和密码登陆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influx -username sam -password crtsoft</span><br></pre></td></tr></table></figure></p><p>这时才可以成功登陆并访问库。</p><h5 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h5><h6 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Show databases</span><br></pre></td></tr></table></figure><h6 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Create database test</span><br></pre></td></tr></table></figure><h6 id="调用数据库"><a href="#调用数据库" class="headerlink" title="调用数据库"></a>调用数据库</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use test</span><br></pre></td></tr></table></figure><h6 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Drop database test</span><br></pre></td></tr></table></figure><h5 id="表管理-measurement"><a href="#表管理-measurement" class="headerlink" title="表管理(measurement)"></a>表管理(measurement)</h5><p>Influxdb的表无需创建，插入时直接指定measurement即可，数据库会自动创建相应的结构</p><h5 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h5><h6 id="插入-Insert"><a href="#插入-Insert" class="headerlink" title="插入(Insert)"></a>插入(Insert)</h6><p>一般插入数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert tagdata,tagname=3303a,modelid=5 tagrt=0.335,tagexp=0.338</span><br></pre></td></tr></table></figure></p><h6 id="指定时间插入"><a href="#指定时间插入" class="headerlink" title="指定时间插入"></a>指定时间插入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert tagdata,tagname=3303c,modelid=4 tagrt=0.330,tagexp=0.338 1561083532990159500</span><br></pre></td></tr></table></figure><h6 id="查询-Select"><a href="#查询-Select" class="headerlink" title="查询(Select)"></a>查询(Select)</h6><p>查询所有内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from tagdata</span><br></pre></td></tr></table></figure><p>按字段查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select modelid,TagRT,TagExp FROM tagdata</span><br></pre></td></tr></table></figure><p>按数量限制(top 100)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from tagdata limit 100</span><br></pre></td></tr></table></figure><p>按条件查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from tagdata where tagExp&gt;0.333</span><br></pre></td></tr></table></figure><p>tags查询需要用引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from tagdata where tagname=’3303a’</span><br></pre></td></tr></table></figure><p>按时间排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from tagdata order by time</span><br></pre></td></tr></table></figure><h6 id="删除-Delete"><a href="#删除-Delete" class="headerlink" title="删除(Delete)"></a>删除(Delete)</h6><p>注意，如果条件是tags必须用引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from tagdata where modelid=&apos;5&apos;</span><br></pre></td></tr></table></figure><h6 id="更新-Update"><a href="#更新-Update" class="headerlink" title="更新(Update)"></a>更新(Update)</h6><p>理论上不提供update，但是经过我尝试，insert的时候，时间一样和各tags一样，就会覆盖以前的记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert tagdata,tagname=3303c,modelid=4 tagrt=0.330,tagexp=0.338 1561083532990159500</span><br></pre></td></tr></table></figure><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><p>Top<br>返回数量最大的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select top(tagexp,3) from tagdata</span><br></pre></td></tr></table></figure><p>bottom<br>最小，同top</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select bottom(tagexp,3) from tagdata</span><br></pre></td></tr></table></figure><p>First<br>返回时间最早的一条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT First(tagexp) from tagdata</span><br></pre></td></tr></table></figure><p>Last<br>返回时间最晚的一条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Last(tagexp) from tagdata</span><br></pre></td></tr></table></figure><p>Max<br>取最大</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Max(tagexp) from tagdata</span><br></pre></td></tr></table></figure><p>Min<br>取最小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Min(tagexp) from tagdata</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> influxdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebAPI不支持PUT和DELETE方法解决方案</title>
      <link href="2019/06/06/WebAPI%E4%B8%8D%E6%94%AF%E6%8C%81PUT%E5%92%8CDELETE%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2019/06/06/WebAPI%E4%B8%8D%E6%94%AF%E6%8C%81PUT%E5%92%8CDELETE%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>在WebAPI中，在高版本IIS中部署默认是不支持PUT和DELETE方法的，那是因为安装了WebDAVModule的缘故，需要添加对PUT和DELETE的支持，需要在web.config里添加如下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.webServer&gt;</span><br><span class="line">   &lt;validation validateIntegratedModeConfiguration=&quot;false&quot; /&gt;</span><br><span class="line">  &lt;modules runAllManagedModulesForAllRequests=&quot;true&quot; &gt;</span><br><span class="line">    &lt;remove name=&quot;WebDAVModule&quot; /&gt;  </span><br><span class="line">  &lt;/modules&gt;</span><br><span class="line">&lt;/system.webServer&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> webapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebAPI自定义排序-Help Page类和继承类属性排序</title>
      <link href="2019/06/05/WebAPI%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F-Help-Page%E7%B1%BB%E5%92%8C%E7%BB%A7%E6%89%BF%E7%B1%BB%E5%B1%9E%E6%80%A7%E6%8E%92%E5%BA%8F/"/>
      <url>2019/06/05/WebAPI%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F-Help-Page%E7%B1%BB%E5%92%8C%E7%BB%A7%E6%89%BF%E7%B1%BB%E5%B1%9E%E6%80%A7%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>在上上篇博客中，我记录了类和继承类属性输出JSON的自定义排序。在上篇博客中，我记录了控制器在Help Page的自定义排序。</p><p>那么，新问题来了，就是类和继承类的属性在Help page上的排序。</p><p>在Help page中，API详情页面和类的详情页面都会显示类的详情，包括名称、类型、描述等信息：</p><p><img src="\images\pasted-sam-5.png" alt="upload successful"></p><p>这些信息是通过ParameterDescription列表来展示出来的，关于类和继承类的顺序，这里一样默认先显示继承类的属性，再显示父类的属性。</p><p>根据在上上篇设置的DataMember特性，仅对于输出JSON有效，对于这里的展示并没有效果，那么我们需要根据上篇博客对控制器排序的灵感，按照属性的DataMember特性进行排序，达到按自定义顺序展示的目的。</p><p>期间我尝试了很多种办法，在前几篇博客中，我记录过关于属性特性获取的方法，是需要根据属性所属类的类型来获取的，然而Helppage显示属性列表的模板页的Model为IList &lt; ParameterDescription &gt;，并不包含类的类型信息，最后我的办法是，通过viewdata传入模板关于类的类型信息，然后调用自写的compare进行比较。</p><h6 id="1-编写自定义compare方法"><a href="#1-编写自定义compare方法" class="headerlink" title="1.编写自定义compare方法"></a>1.编写自定义compare方法</h6><p>在上篇目录建立的自定义属性文件夹下，创建一个类，用来对模型的DataMember特性进行排序，我命名为ModelCompareWithDataMember.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">using IEM.WebAPI.Web.Areas.HelpPage.ModelDescriptions;</span><br><span class="line">using System;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line"></span><br><span class="line">namespace IEM.WebAPI.Web.Areas.HelpPage.CustomAttribute</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 自定义属性排序，根据DataMember的Order属性</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public class ModelCompareWithDataMember : System.Collections.Generic.IComparer&lt;ParameterDescription&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 属性的类的类型</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        private Type modelType;</span><br><span class="line">        public ModelCompareWithDataMember(Type _modelType)</span><br><span class="line">        &#123;</span><br><span class="line">            modelType = _modelType;</span><br><span class="line">        &#125;</span><br><span class="line">        public int Compare(ParameterDescription x, ParameterDescription y)</span><br><span class="line">        &#123;</span><br><span class="line">            //如果传入为null，直接return</span><br><span class="line">            if (modelType == null) return 0;</span><br><span class="line">            //根据类型分别获取属性</span><br><span class="line">            PropertyInfo pro1 = modelType.GetProperty(x.Name);</span><br><span class="line">            PropertyInfo pro2 = modelType.GetProperty(y.Name);</span><br><span class="line">            if (pro1 == null || pro2 == null) return 0;</span><br><span class="line"></span><br><span class="line">            object[] objList1 = pro1.GetCustomAttributes(typeof(DataMemberAttribute), true);</span><br><span class="line">            object[] objList2 = pro2.GetCustomAttributes(typeof(DataMemberAttribute), true);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            int order1 = objList1.Length == 0 ? 99 : ((DataMemberAttribute)objList1[0]).Order;</span><br><span class="line">            int order2 = objList2.Length == 0 ? 99 : ((DataMemberAttribute)objList2[0]).Order;</span><br><span class="line"></span><br><span class="line">            return order1.CompareTo(order2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原理是调用的时候，将属性所属类的类型传入，然后通过类获取属性的特性值。</p><h6 id="2-在Parameters-cshtml中，调用排序函数"><a href="#2-在Parameters-cshtml中，调用排序函数" class="headerlink" title="2.在Parameters.cshtml中，调用排序函数"></a>2.在Parameters.cshtml中，调用排序函数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@foreach (ParameterDescription parameter in Model.OrderBy(o =&gt; o, new ModelCompareWithDataMember((Type)(ViewBag.entityType))))</span><br><span class="line">           &#123;</span><br><span class="line">               </span><br><span class="line">               ModelDescription modelDescription = parameter.TypeDescription;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">               ......</span><br></pre></td></tr></table></figure><h6 id="3-在调用Parameters-cshtml模板的页面，通过viewdata传入类型"><a href="#3-在调用Parameters-cshtml模板的页面，通过viewdata传入类型" class="headerlink" title="3.在调用Parameters.cshtml模板的页面，通过viewdata传入类型"></a>3.在调用Parameters.cshtml模板的页面，通过viewdata传入类型</h6><p>这里我应用了两处地方，分别是API页面关于返回值的类型列表，和类的属性列表页面，如果有其他处需要排序，也可类似加上。</p><p>(1).HelpPageApiModel.cshtml</p><p><img src="\images\pasted-sam-9.png" alt="upload successful"></p><p>(2).ComplexTypeModelDescription.cshtml</p><p><img src="\images\pasted-sam-8.png" alt="upload successful"></p><p>至此，大功告成。</p><p>End</p>]]></content>
      
      
      
        <tags>
            
            <tag> webapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebAPI自定义排序-Help Page控制器排序</title>
      <link href="2019/06/05/WebAPI%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F-Help-Page%E6%8E%A7%E5%88%B6%E5%99%A8%E6%8E%92%E5%BA%8F/"/>
      <url>2019/06/05/WebAPI%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F-Help-Page%E6%8E%A7%E5%88%B6%E5%99%A8%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>Microsoft为WEBAPI提供了默认的帮助页面，并且帮助页面也十分的简洁和美观，在帮助主页上显示了各控制器，以及控制器所属API，只不过并没有提供控制器的排序方式（也可能是我没找到）。</p><p>经过摸索和思考后，我通过对控制器添加自定义特性，在显示页面按照特性排序的方法来实现自定义排序。</p><p>关于特性的方法，在前面博客中介绍了，这里记录实现自定义排序的过程。</p><h6 id="1-创建自定义特性"><a href="#1-创建自定义特性" class="headerlink" title="1.创建自定义特性"></a>1.创建自定义特性</h6><p>在Areas的HelpPage文件夹下创建一个文件夹，命名为CustomAttribute，用来存放自定义特性和排序方法。在此目录新建一个类，我这里命名为IEMControCustomAttribute，且只添加了一个Order属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace IEM.WebAPI.Web.Areas.HelpPage.CustomAttribute</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 自定义类特性</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = true)]</span><br><span class="line">    public class IEMControCustomAttribute : Attribute</span><br><span class="line">    &#123;</span><br><span class="line">        public int Order &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="2-给各控制器添加此特性"><a href="#2-给各控制器添加此特性" class="headerlink" title="2.给各控制器添加此特性"></a>2.给各控制器添加此特性</h6><p>这步就是给每个控制器添加新建的自定义特性，注意命名空间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[IEMControCustom(Order = 1)]</span><br><span class="line">public class IEMAssetsController : ApiController</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="3-1-编写排序方法"><a href="#3-1-编写排序方法" class="headerlink" title="3.1 编写排序方法"></a>3.1 编写排序方法</h6><p>在命名为CustomAttribute目录，新建一个类，继承自ICompare，并实现Compare方法，这里我命名为ControllerCompare.cs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">using System.Web.Http.Controllers;</span><br><span class="line"></span><br><span class="line">namespace IEM.WebAPI.Web.Areas.HelpPage.CustomAttribute</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 自定义Controller排序方法</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public class ControllerCompare : System.Collections.Generic.IComparer&lt;HttpControllerDescriptor&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        public int Compare(HttpControllerDescriptor x, HttpControllerDescriptor y)</span><br><span class="line">        &#123;</span><br><span class="line">            //获取特性</span><br><span class="line">            object[] objList1 = x.ControllerType.GetCustomAttributes(typeof(IEMControCustomAttribute), true);</span><br><span class="line">            object[] objList2 = y.ControllerType.GetCustomAttributes(typeof(IEMControCustomAttribute), true);</span><br><span class="line"></span><br><span class="line">            //不存在特性的，排序默认99</span><br><span class="line">            int order1 = objList1.Length == 0 ? 99 : ((IEMControCustomAttribute)objList1[0]).Order;</span><br><span class="line">            int order2 = objList2.Length == 0 ? 99 : ((IEMControCustomAttribute)objList2[0]).Order;</span><br><span class="line"></span><br><span class="line">            return order1.CompareTo(order2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@foreach (var group in apiGroups)</span><br><span class="line">&#123;</span><br><span class="line">    @Html.DisplayFor(m =&gt; group, &quot;ApiGroup&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@foreach (var group in apiGroups.OrderBy(n =&gt; n.Key, new ControllerCompare()))</span><br><span class="line">&#123;</span><br><span class="line">    @Html.DisplayFor(m =&gt; group, &quot;ApiGroup&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="3-2-或者直接用linq排"><a href="#3-2-或者直接用linq排" class="headerlink" title="3.2 或者直接用linq排"></a>3.2 或者直接用linq排</h6><p>在Index页面操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//对apiGroups进行排序</span><br><span class="line"></span><br><span class="line">// Group APIs by controller</span><br><span class="line">ILookup&lt;HttpControllerDescriptor, ApiDescription&gt; apiGroups = Model.ToLookup(api =&gt; api.ActionDescriptor.ControllerDescriptor);</span><br><span class="line">//根据特性对控制器排序</span><br><span class="line">var apiGroupsOrder = apiGroups.OrderBy(a =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    var att = a.Key.ControllerType.GetCustomAttributes(typeof(IEMControCustomAttribute), true);</span><br><span class="line">    return att.Length == 0 ? 99 : ((IEMControCustomAttribute)att[0]).Order;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>然后在引用位置将apiGroups改为apiGroupsOrder<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@foreach (var group in apiGroupsOrder)</span><br><span class="line">&#123;</span><br><span class="line">    @Html.DisplayFor(m =&gt; group, &quot;ApiGroup&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意命名空间的引用。</p><p>至此完成了控制器的排序。</p>]]></content>
      
      
      
        <tags>
            
            <tag> webapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebAPI自定义排序-类和继承类输出JSON排序</title>
      <link href="2019/06/05/WebAPI%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F-%E7%B1%BB%E5%92%8C%E7%BB%A7%E6%89%BF%E7%B1%BB%E8%BE%93%E5%87%BAJSON%E6%8E%92%E5%BA%8F/"/>
      <url>2019/06/05/WebAPI%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F-%E7%B1%BB%E5%92%8C%E7%BB%A7%E6%89%BF%E7%B1%BB%E8%BE%93%E5%87%BAJSON%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>在WEBAPI中，设置JSON输出后，默认输出的排序顺序是按照类的属性顺序来输出的，但是如果有继承的情况，就以子类属性顺序为先，父类属性顺序为后。</p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class AssetNode</span><br><span class="line">   &#123;</span><br><span class="line">       public string AssetID &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">       public string AssetPath &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">       public string AssetType &#123; get; set; &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">    public class AssetDetails : AssetNode</span><br><span class="line">   &#123;</span><br><span class="line">       public string GraphicType &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">       public string GraphicValue &#123; get; set; &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>如果输出AssetNode，那么输出结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;AssetID&quot;: &quot;sample string 1&quot;,</span><br><span class="line">  &quot;AssetPath&quot;: &quot;sample string 2&quot;,</span><br><span class="line">  &quot;AssetType&quot;: &quot;sample string 3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果输出AssetDetails，那么输出结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;GraphicType&quot;: &quot;sample string 1&quot;,</span><br><span class="line">  &quot;GraphicValue&quot;: &quot;sample string 2&quot;,</span><br><span class="line">  &quot;AssetID&quot;: &quot;sample string 7&quot;,</span><br><span class="line">  &quot;AssetPath&quot;: &quot;sample string 8&quot;,</span><br><span class="line">  &quot;AssetType&quot;: &quot;sample string 9&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然而我希望父类的属性在前面，子类的属性在后面，解决办法是类引用DataContract特性，并在每个属性上引用DataMember(Order = 1)特性设置Order，这样就可以按照Order的顺序输出了，需要注意的是，每个属性都要引用DataMember特性，否则就不会输出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[DataContract]</span><br><span class="line">public class AssetNode</span><br><span class="line">&#123;</span><br><span class="line">    [DataMember(Order = 1)]</span><br><span class="line">    public string AssetID &#123; get; set; &#125;</span><br><span class="line">    [DataMember(Order = 1)]</span><br><span class="line">    public string AssetPath &#123; get; set; &#125;</span><br><span class="line">    [DataMember(Order = 1)]</span><br><span class="line">    public string AssetType &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line">[DataContract]</span><br><span class="line"> public class AssetDetails : AssetNode</span><br><span class="line">&#123;</span><br><span class="line">    [DataMember(Order = 99)]</span><br><span class="line">    public string GraphicType &#123; get; set; &#125;</span><br><span class="line">    [DataMember(Order = 99)]</span><br><span class="line">    public string GraphicValue &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>End</p>]]></content>
      
      
      
        <tags>
            
            <tag> webapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#中自定义类和属性的特性，以及获取特性的值</title>
      <link href="2019/06/05/C-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%B1%9E%E6%80%A7%E7%9A%84%E7%89%B9%E6%80%A7%EF%BC%8C%E4%BB%A5%E5%8F%8A%E8%8E%B7%E5%8F%96%E7%89%B9%E6%80%A7%E7%9A%84%E5%80%BC/"/>
      <url>2019/06/05/C-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E5%B1%9E%E6%80%A7%E7%9A%84%E7%89%B9%E6%80%A7%EF%BC%8C%E4%BB%A5%E5%8F%8A%E8%8E%B7%E5%8F%96%E7%89%B9%E6%80%A7%E7%9A%84%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>最近做WEBAPI时，遇到类和属性需要自定义排序的需求，所以对特性进行了一些了解。</p><h6 id="什么是特性"><a href="#什么是特性" class="headerlink" title="什么是特性"></a>什么是特性</h6><p>特性（attribute）是被指定给某一声明的一则附加的声明性信息。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[DataMember(Order = 99)]</span><br><span class="line">public string GraphicType &#123; get; set; &#125;</span><br></pre></td></tr></table></figure></p><p>方括号里的属性，就是特性。</p><h6 id="自定义特性"><a href="#自定义特性" class="headerlink" title="自定义特性"></a>自定义特性</h6><p>自定义特性就是自己写一个特性，用以规范类和属性，加上自定义的特性内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">namespace IEM.WebAPI.Web.Areas.HelpPage.CustomAttribute</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 自定义类特性</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = true)]</span><br><span class="line">    public class IEMControCustomAttribute : Attribute</span><br><span class="line">    &#123;</span><br><span class="line">        public int Order &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面是我自定义的一个特性，用来按照自己的意愿进行排序，自定义特性需继承自Attribute类，AttributeUsage里面规范了特性，AttributeTargets.Property代表可用于属性，AttributeTargets.Class代表可用于类，Inherited代表可被继承。</p><h6 id="获取特性的值"><a href="#获取特性的值" class="headerlink" title="获取特性的值"></a>获取特性的值</h6><p>获取特性的值分为获取类的特性和属性的特性。</p><p>1.获取类的特性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IEMControCustomAttribute attr = T.GetType().GetCustomAttributes(typeof(IEMControCustomAttribute), true)[0];</span><br><span class="line">//获取特性的属性</span><br><span class="line">int order = attr.Order;</span><br></pre></td></tr></table></figure></p><p>注意，上面GetCustomAttributes获取的是数组，如果你的类不含有这个特性，获取的将会是一个0长度的数组，所以使用时应注意判断不含特性的情况。</p><p>2.获取属性的特性</p><p>获取属性的特性需要通过类的Type，使用GetProperty获取属性，然后获取特性值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IEMControCustomAttribute attr  = T.GetProperty(pName).GetCustomAttributes(typeof(IEMControCustomAttribute), true)[0];</span><br><span class="line">//获取特性的属性</span><br><span class="line">int order = attr.Order;</span><br></pre></td></tr></table></figure></p><p>同理我们需要判断属性不存在，和特性不存在的情况。</p><p>以上是获取特性的简单方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebAPI跨域设置</title>
      <link href="2019/06/03/WebAPI%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/"/>
      <url>2019/06/03/WebAPI%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>在网页使用ajax异步调用的过程中，会有一个跨域的情况出现，简单说就是不同的网站进行异步一般是不可以的。<br>在WebAPI中如此设置跨域。</p><p>1.Nuget搜索并安装microsoft.aspnet.webapi.cors</p><p>2.web.config appSettings添加如下配置(这里默认全部允许，如果自定义多个网址用半角逗号隔开)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;add key=&quot;cors_allowOrigins&quot; value=&quot;*&quot;/&gt;</span><br><span class="line">&lt;add key=&quot;cors_allowHeaders&quot; value=&quot;*&quot;/&gt;</span><br><span class="line">&lt;add key=&quot;cors_allowMethods&quot; value=&quot;*&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>3.WebAPIConfig.cs  Register函数中添加如下设置代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var allowOrigins = ConfigurationManager.AppSettings[&quot;cors_allowOrigins&quot;];</span><br><span class="line">var allowHeaders = ConfigurationManager.AppSettings[&quot;cors_allowHeaders&quot;];</span><br><span class="line">var allowMethods = ConfigurationManager.AppSettings[&quot;cors_allowMethods&quot;];</span><br><span class="line">var globalCors = new EnableCorsAttribute(allowOrigins, allowHeaders, allowMethods);</span><br><span class="line">config.EnableCors(globalCors);</span><br></pre></td></tr></table></figure></p><p>4.大功告成</p>]]></content>
      
      
      
        <tags>
            
            <tag> webapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebAPI中多个项目引用导致Help Page不显示描述问题解决</title>
      <link href="2019/06/03/WebAPI%E4%B8%AD%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AE%E5%BC%95%E7%94%A8%E5%AF%BC%E8%87%B4Help-Page%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>2019/06/03/WebAPI%E4%B8%AD%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AE%E5%BC%95%E7%94%A8%E5%AF%BC%E8%87%B4Help-Page%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>做WEBAPI时，微软提供了帮助页面，在类和属性中写好注释后，帮助页面会显示相应的注释描述。（具体方法大致是勾选生成XML，HelpPage页面配置中加载那个xml）<br>后来因为我的项目庞大，我将其拆分为几个项目层，这样问题就出现了，只显示web层的描述，因为其他项目层的XML文件并没有复制并加载到当前Help Page中，在不断的查询资料后，在 <a href="https://stackoverflow.com/questions/21895257/how-can-xml-documentation-for-web-api-include-documentation-from-beyond-the-main" target="_blank" rel="noopener">stackflow</a> 中找到了解决方案。</p><h6 id="解决方案如下"><a href="#解决方案如下" class="headerlink" title="解决方案如下"></a>解决方案如下</h6><p>1.在主项目层中新建文件夹，我命名为HelpRes。</p><p>2.类库项目层(我的项目中叫viewModels)勾选生成xml，路径写到主项目层的HelpRes文件夹下：</p><p><img src="\images\pasted-sam-2.png" alt="upload successful"></p><p>3.主项目层中找到HelpRes下的这个xml，并包括在项目中，将其复制属性设置为：  如果较新则复制</p><p>4.主项目层项目属性也勾选生成xml文件，路径为生成目录的HelpRes文件夹，同理包括在项目中，更改复制属性。</p><p><img src="\images\pasted-sam-4.png" alt="upload successful"></p><p>5.主项目层的HelpPage文件夹下的Models文件夹下，新增如下类MultiXmlDocumentationProvider.cs（注意命名空间）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Web.Http.Controllers;</span><br><span class="line">using System.Web.Http.Description;</span><br><span class="line">using IEM.WebAPI.Web.Areas.HelpPage.ModelDescriptions;</span><br><span class="line"></span><br><span class="line">namespace IEM.WebAPI.Web.Areas.HelpPage.Models</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;A custom </span><br><span class="line">    /// &lt;see cref=&quot;IDocumentationProvider&quot;/&gt; </span><br><span class="line">    /// that reads the API documentation from a collection of XML documentation files.</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public class MultiXmlDocumentationProvider : IDocumentationProvider, IModelDocumentationProvider</span><br><span class="line">    &#123;</span><br><span class="line">        /*********</span><br><span class="line">    ** Properties </span><br><span class="line">    *********/</span><br><span class="line">        /// &lt;summary&gt;The internal documentation providers for specific files.&lt;/summary&gt;</span><br><span class="line">        private readonly XmlDocumentationProvider[] Providers;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /*********</span><br><span class="line">        ** Public methods</span><br><span class="line">        *********/</span><br><span class="line">        /// &lt;summary&gt;Construct an instance.&lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;paths&quot;&gt;The physical paths to the XML documents.&lt;/param&gt;</span><br><span class="line">        public MultiXmlDocumentationProvider(params string[] paths)</span><br><span class="line">        &#123;</span><br><span class="line">            this.Providers = paths.Select(p =&gt; new XmlDocumentationProvider(p)).ToArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;Gets the documentation for a subject.&lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;subject&quot;&gt;The subject to document.&lt;/param&gt;</span><br><span class="line">        public string GetDocumentation(MemberInfo subject)</span><br><span class="line">        &#123;</span><br><span class="line">            return this.GetFirstMatch(p =&gt; p.GetDocumentation(subject));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;Gets the documentation for a subject.&lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;subject&quot;&gt;The subject to document.&lt;/param&gt;</span><br><span class="line">        public string GetDocumentation(Type subject)</span><br><span class="line">        &#123;</span><br><span class="line">            return this.GetFirstMatch(p =&gt; p.GetDocumentation(subject));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;Gets the documentation for a subject.&lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;subject&quot;&gt;The subject to document.&lt;/param&gt;</span><br><span class="line">        public string GetDocumentation(HttpControllerDescriptor subject)</span><br><span class="line">        &#123;</span><br><span class="line">            return this.GetFirstMatch(p =&gt; p.GetDocumentation(subject));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;Gets the documentation for a subject.&lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;subject&quot;&gt;The subject to document.&lt;/param&gt;</span><br><span class="line">        public string GetDocumentation(HttpActionDescriptor subject)</span><br><span class="line">        &#123;</span><br><span class="line">            return this.GetFirstMatch(p =&gt; p.GetDocumentation(subject));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;Gets the documentation for a subject.&lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;subject&quot;&gt;The subject to document.&lt;/param&gt;</span><br><span class="line">        public string GetDocumentation(HttpParameterDescriptor subject)</span><br><span class="line">        &#123;</span><br><span class="line">            return this.GetFirstMatch(p =&gt; p.GetDocumentation(subject));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;Gets the documentation for a subject.&lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;subject&quot;&gt;The subject to document.&lt;/param&gt;</span><br><span class="line">        public string GetResponseDocumentation(HttpActionDescriptor subject)</span><br><span class="line">        &#123;</span><br><span class="line">            return this.GetFirstMatch(p =&gt; p.GetDocumentation(subject));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /*********</span><br><span class="line">        ** Private methods</span><br><span class="line">        *********/</span><br><span class="line">        /// &lt;summary&gt;Get the first valid result from the collection of XML documentation providers.&lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;expr&quot;&gt;The method to invoke.&lt;/param&gt;</span><br><span class="line">        private string GetFirstMatch(Func&lt;XmlDocumentationProvider, string&gt; expr)</span><br><span class="line">        &#123;</span><br><span class="line">            return this.Providers</span><br><span class="line">                .Select(expr)</span><br><span class="line">                .FirstOrDefault(p =&gt; !String.IsNullOrWhiteSpace(p));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.在HelpPage的App_Start下的HelpPageConfig.cs中，增加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config.SetDocumentationProvider(new Models.MultiXmlDocumentationProvider(</span><br><span class="line">    HttpContext.Current.Server.MapPath(&quot;~/bin/HelpRes/IEM.WebAPIHelp.XML&quot;),</span><br><span class="line">    HttpContext.Current.Server.MapPath(&quot;~/bin/HelpRes/IEM.WebAPIHelp_ViewModel.XML&quot;))</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></p><p>如此生成后，即可发现，可完美显示viewmodel项目层的描述了。如果需要添加其他项目层，方法一样，都把xml生成路径写到主项目层的HelpRes文件夹下后，引用即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> webapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebAPI中因循环导致Help Page示例报错问题</title>
      <link href="2019/05/31/WebAPI%E4%B8%AD%E5%9B%A0%E5%BE%AA%E7%8E%AF%E5%AF%BC%E8%87%B4Help-Page%E7%A4%BA%E4%BE%8B%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
      <url>2019/05/31/WebAPI%E4%B8%AD%E5%9B%A0%E5%BE%AA%E7%8E%AF%E5%AF%BC%E8%87%B4Help-Page%E7%A4%BA%E4%BE%8B%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在WEBAPI中，因为类的属性是树形属性，含有递归情况，所以Help Page在现实Sample时会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">An exception has occurred while using the formatter &apos;JsonMediaTypeFormatter&apos; to generate sample for media type &apos;application/json&apos;. Exception message: Self referencing loop detected with type &apos;IEM.WebAPI.ViewModel.ViewModels.Actors.IEMActorNodeWithTree&apos;. Path &apos;ChildNodes&apos;.</span><br></pre></td></tr></table></figure></p><h6 id="解决方案：在WebApiConfig-cs中添加如下代码："><a href="#解决方案：在WebApiConfig-cs中添加如下代码：" class="headerlink" title="解决方案：在WebApiConfig.cs中添加如下代码："></a>解决方案：在WebApiConfig.cs中添加如下代码：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.Formatters.JsonFormatter.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> webapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EF中基类添加默认值的方法</title>
      <link href="2019/05/28/EF%E4%B8%AD%E5%9F%BA%E7%B1%BB%E6%B7%BB%E5%8A%A0%E9%BB%98%E8%AE%A4%E5%80%BC%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>2019/05/28/EF%E4%B8%AD%E5%9F%BA%E7%B1%BB%E6%B7%BB%E5%8A%A0%E9%BB%98%E8%AE%A4%E5%80%BC%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在EF中，有时所有的库均有相同的字段，例如CreateTime，LastModifyTime等，需要在创建时填入创建时间，修改时填入修改时间，基于这种需求，采用以下方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public bool Insert(TEntity entity)</span><br><span class="line">&#123;</span><br><span class="line">    //添加插入时的默认值</span><br><span class="line">    PropertyInfo[] propertys = entity.GetType().GetProperties();</span><br><span class="line">    PropertyInfo pi = propertys.FirstOrDefault(t=&gt;t.Name.ToLower()==&quot;createtime&quot;);</span><br><span class="line">    if (pi != null) pi.SetValue(entity, DateTime.Now);</span><br><span class="line"></span><br><span class="line">    dbContext.Entry&lt;TEntity&gt;(entity).State = EntityState.Added;</span><br><span class="line">    return dbContext.SaveChanges() &gt; 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，就可以把相应的时间统一写入了。修改时间等同理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ef </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EntityFramework(EF框架)入门实例</title>
      <link href="2019/05/28/EntityFramework-EF%E6%A1%86%E6%9E%B6-%E5%85%A5%E9%97%A8%E5%AE%9E%E4%BE%8B/"/>
      <url>2019/05/28/EntityFramework-EF%E6%A1%86%E6%9E%B6-%E5%85%A5%E9%97%A8%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是EntityFramework-EF框架"><a href="#什么是EntityFramework-EF框架" class="headerlink" title="什么是EntityFramework(EF框架)"></a>什么是EntityFramework(EF框架)</h4><p>微软自己出的ORM框架，具体不说了，百度。</p><h4 id="EF的优势"><a href="#EF的优势" class="headerlink" title="EF的优势"></a>EF的优势</h4><p>不用写传统SQL，不用写各种ado，不用来回操作datatable，简单而言，就是便于开发，便于维护。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>下面将从建项目开始，一步步操作，生成通用仓储类，以及简单测试。</p><h5 id="一、新建项目"><a href="#一、新建项目" class="headerlink" title="一、新建项目"></a>一、新建项目</h5><p> 1.新建项目及解决方案，这里我起名叫EFTestDemo</p><p> 2.在此解决方案上，新建一个项目，这里我起名叫Entity，这个项目的主要作用是，存放EF的实体类，和默认上下文。</p><p> 3.在此解决方案上，新建一个项目，这里我起名叫IRepository，这个项目的主要作用是，定义仓储基类以及各操作类的接口。</p><p> 4.在此解决方案上，新建一个项目，这里我起名叫Repository，这个项目的主要作用当然是实现上面那个项目定义的接口了。</p><p>至此，基本的项目就建立完毕了。</p><h5 id="二、安装EntityFramework"><a href="#二、安装EntityFramework" class="headerlink" title="二、安装EntityFramework"></a>二、安装EntityFramework</h5><pre><code>分别在EFTestDemo、Entity、Repository三个项目中，使用NuGet安装EntityFramework.</code></pre><h5 id="三、创建实例和上下文"><a href="#三、创建实例和上下文" class="headerlink" title="三、创建实例和上下文"></a>三、创建实例和上下文</h5><p>此操作在Entity项目上进行。此类需要安装EF。</p><p>1.右击Entity项目–添加–新建项，选择Data标签下的 ADO.NET 实体数据模型，这里名称我填写的是EFDB。将会弹出模型向导，这里涉及到一个Code First和Database First的模式，这里我选择的是来自数据库的Code First（或者选择来自数据库的EF设计器，也就是Database First）。</p><p>简单的说，这两种模式的区别在于database first模式包含模型设计器，而且可以更新模型，缺点是冗余。Code first优势在于自由，轻量，甚至可以根据code而更改数据库结构（对于我的项目而言，此操作会造成麻烦）。</p><p>2.根据提示选择数据库，如果没有连接需要新建一个数据库连接，然后勾选表结构，然后将会自动生成相应的实例类和上下文。</p><p>此处我的测试库有3个表，所以自动生成了以下4个类。</p><p><img src="\images\pasted-sam-1.png" alt="upload successful"></p><p>EFDB是默认上下文，其他三个类分别代表了3个实体。</p><p>至此，Entity项目的操作就完成了，需要注意的是，因为这里我是多个项目，所以需要把app.config的连接(connectionStrings)复制到主项目的app.config里。</p><h5 id="四、编写接口"><a href="#四、编写接口" class="headerlink" title="四、编写接口"></a>四、编写接口</h5><p>此操作在IRepository项目上进行。<br>1.新建仓储接口，这里我命名为IBaseRepository，源码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Data.Common;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Linq.Expressions;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace IRepository</span><br><span class="line">&#123;</span><br><span class="line">    public interface IBaseRepository&lt;TEntity&gt; where TEntity : class</span><br><span class="line">    &#123;</span><br><span class="line">        bool Insert(TEntity entity);</span><br><span class="line">        bool Update(TEntity entity);</span><br><span class="line">        bool Delete(TEntity entity);</span><br><span class="line"></span><br><span class="line">        TEntity FindEntity(object key);</span><br><span class="line">        TEntity FindEntity(Expression&lt;Func&lt;TEntity, bool&gt;&gt; predicate);</span><br><span class="line"></span><br><span class="line">        IQueryable&lt;TEntity&gt; IQueryable();</span><br><span class="line">        IQueryable&lt;TEntity&gt; IQueryable(Expression&lt;Func&lt;TEntity, bool&gt;&gt; predicate);</span><br><span class="line"></span><br><span class="line">        List&lt;TEntity&gt; FindList(string strSql);</span><br><span class="line">        List&lt;TEntity&gt; FindList(string strSql, DbParameter[] dbParameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>分别定义了 插入、更新、删除、获取单个实体(按主键)、获取单个实体(按表达式)、获取Iqueryable、获取Iqueryable(按表达式)、按sql获取列表，按sql+参数获取列表。此处并不难理解。</p><p>2.新建用户类接口，这里我命名为IUserRepository，继承自上面的基类仓储接口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">namespace IRepository</span><br><span class="line">&#123;</span><br><span class="line">    public interface IUserRepository : IBaseRepository&lt;Entity.EFUsers&gt;</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.同理定义其他两个实体操作类接口，这里我并没有做。</p><p>至此，IRepository上面的操作就完成了。</p><h5 id="五、根据接口实现"><a href="#五、根据接口实现" class="headerlink" title="五、根据接口实现"></a>五、根据接口实现</h5><p>此操作在Repository项目上进行。此项目需要安装EF，并需要引用IRepository和Entity。</p><p>1.新建一个类，作为仓储基类，用来实现IBaseRepository接口，这里我命名为BaseRespository，此类需集成自接口，源码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Data.Common;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Linq.Expressions;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">using System.Data.Entity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace Repository</span><br><span class="line">&#123;</span><br><span class="line">    public class BaseRespository&lt;TEntity&gt; : IRepository.IBaseRepository&lt;TEntity&gt; where TEntity : class</span><br><span class="line">    &#123;</span><br><span class="line">        Entity.EFDB dbContext;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 构造函数，生成上下文</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public BaseRespository()</span><br><span class="line">        &#123;</span><br><span class="line">        //这里如需要自定义连接串，需在EFDB类中添加重载的构造函数，然后此处自定义字符串传入。</span><br><span class="line">        </span><br><span class="line">            this.dbContext = new Entity.EFDB();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 插入</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;entity&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        public bool Insert(TEntity entity)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            dbContext.Entry&lt;TEntity&gt;(entity).State = EntityState.Added;</span><br><span class="line">            return dbContext.SaveChanges() &gt; 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 更新</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;entity&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        public bool Update(TEntity entity)</span><br><span class="line">        &#123;</span><br><span class="line">            if (dbContext.Entry&lt;TEntity&gt;(entity).State != EntityState.Detached)</span><br><span class="line">            &#123;</span><br><span class="line">                dbContext.Set&lt;TEntity&gt;().Attach(entity);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            dbContext.Entry&lt;TEntity&gt;(entity).State = EntityState.Modified;</span><br><span class="line">            return dbContext.SaveChanges() &gt; 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 删除</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;entity&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        public bool Delete(TEntity entity)</span><br><span class="line">        &#123;</span><br><span class="line">            if (dbContext.Entry&lt;TEntity&gt;(entity).State != EntityState.Detached)</span><br><span class="line">            &#123;</span><br><span class="line">                dbContext.Set&lt;TEntity&gt;().Attach(entity);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            dbContext.Entry&lt;TEntity&gt;(entity).State = EntityState.Deleted;</span><br><span class="line">            return dbContext.SaveChanges() &gt; 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 获取单个实体</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;key&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        public TEntity FindEntity(object key)</span><br><span class="line">        &#123;</span><br><span class="line">            return dbContext.Set&lt;TEntity&gt;().Find(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 获取单个实体</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;predicate&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        public TEntity FindEntity(Expression&lt;Func&lt;TEntity, bool&gt;&gt; predicate)</span><br><span class="line">        &#123;</span><br><span class="line">            return dbContext.Set&lt;TEntity&gt;().FirstOrDefault(predicate);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 获取iqueryable</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        public IQueryable&lt;TEntity&gt; IQueryable()</span><br><span class="line">        &#123;</span><br><span class="line">            return dbContext.Set&lt;TEntity&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 获取iqueryable</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;predicate&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        public IQueryable&lt;TEntity&gt; IQueryable(Expression&lt;Func&lt;TEntity, bool&gt;&gt; predicate)</span><br><span class="line">        &#123;</span><br><span class="line">            return dbContext.Set&lt;TEntity&gt;().Where(predicate);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 根据sql语句获取实体</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;strSql&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        public List&lt;TEntity&gt; FindList(string sqlStr)</span><br><span class="line">        &#123;</span><br><span class="line">            return dbContext.Database.SqlQuery&lt;TEntity&gt;(sqlStr).ToList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 根据sql语句获取实体</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;sqlStr&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;param name=&quot;dbParameter&quot;&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        public List&lt;TEntity&gt; FindList(string sqlStr, DbParameter[] dbParameter)</span><br><span class="line">        &#123;</span><br><span class="line">            return dbContext.Database.SqlQuery&lt;TEntity&gt;(sqlStr, dbParameter).ToList();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>里面每个函数都写了说明。</p><p>2.新建一个类，用来实现用户仓储操作实体类，用来实现IUserRepository，这里我命名为UserRepository，此类需继承自接口，以及仓储基类。源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">namespace Repository</span><br><span class="line">&#123;</span><br><span class="line">    public class UserRepository : BaseRespository&lt;Entity.EFUsers&gt;, IRepository.IUserRepository</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.同理建立其他两个实体仓储操作实体类，这里我并没有做。</p><p>至此，有关EF的基类、操作类等一切已妥当，我们可以开始测试了。</p><h5 id="六、调用测试"><a href="#六、调用测试" class="headerlink" title="六、调用测试"></a>六、调用测试</h5><p>主项目需安装EF，并需引用除接口项目的其他2个项目。<br>在主项目(EFTestDemo)中，新建一个方法，写如下函数，并调用，查看效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Repository.UserRepository userP = new Repository.UserRepository();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//添加</span><br><span class="line">Entity.EFUsers user = new Entity.EFUsers() &#123; UserName = &quot;cc&quot;, UserDes = &quot;dd3344&quot;, UserRole = 3 &#125;;</span><br><span class="line">userP.Insert(user);</span><br><span class="line"></span><br><span class="line">//查找</span><br><span class="line">////Entity.EFUsers userF = userP.FindEntity(3);</span><br><span class="line"></span><br><span class="line">//更新</span><br><span class="line">//userF.UserName = &quot;mmm&quot;;</span><br><span class="line">//userP.Update(userF);</span><br><span class="line"></span><br><span class="line">//删除</span><br><span class="line">//userP.Delete(userF);</span><br><span class="line"></span><br><span class="line">//按条件查找第一个</span><br><span class="line">////userF = userP.FindEntity(t =&gt; t.UserName == &quot;mmm&quot;);</span><br><span class="line"></span><br><span class="line">//iqueryable</span><br><span class="line">////IQueryable&lt;Entity.EFUsers&gt; iq = userP.IQueryable(t =&gt; t.UserDes == &quot;dd&quot;);</span><br><span class="line">//获取数量</span><br><span class="line">////int count = iq.Count();</span><br><span class="line">//获取实体列表</span><br><span class="line">////List&lt;Entity.EFUsers&gt; list = iq.ToList();</span><br><span class="line"></span><br><span class="line">//根据sql语句查找</span><br><span class="line">////List&lt;Entity.EFUsers&gt; list = userP.FindList(&quot;SELECT * FROM EFUsers&quot;);</span><br></pre></td></tr></table></figure></p><p>经测试，各操作均正常，EF和数据库的操作已完美实现。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ef </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net MVC导出CSV用Excel打开乱码问题解决</title>
      <link href="2019/05/22/Net-MVC%E5%AF%BC%E5%87%BACSV%E7%94%A8Excel%E6%89%93%E5%BC%80%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>2019/05/22/Net-MVC%E5%AF%BC%E5%87%BACSV%E7%94%A8Excel%E6%89%93%E5%BC%80%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>最近需要网页使用文件流输出方式导出CSV（UTF8）编码，之前使用webform时，通过文件流方式输出，用以下code导出的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string text = &quot;我乃闲人弹琴&quot;;</span><br><span class="line"></span><br><span class="line">System.Web.HttpContext.Current.Response.AddHeader(&quot;Content-Disposition&quot;, string.Format(&quot;attachment; filename=&#123;0&#125;&quot;, System.Web.HttpUtility.UrlEncode(&quot;ttttt.csv&quot;, System.Text.Encoding.UTF8)));</span><br><span class="line">System.Web.HttpContext.Current.Response.ContentType = &quot;application/vnd.ms-excel&quot;;</span><br><span class="line">System.Web.HttpContext.Current.Response.ContentEncoding = System.Text.Encoding.GetEncoding(&quot;UTF-8&quot;);</span><br><span class="line">System.Web.HttpContext.Current.Response.BinaryWrite(new byte[] &#123; 0xEF, 0xBB, 0xBF &#125;);</span><br><span class="line">System.Web.HttpContext.Current.Response.Write(text);</span><br><span class="line">System.Web.HttpContext.Current.Response.End();</span><br></pre></td></tr></table></figure></p><p>用MVC后，想尝试返回FileResult方式直接导出，所以写来代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ActionResult Export()</span><br><span class="line">&#123;</span><br><span class="line">    string text = &quot;我乃闲人弹琴&quot;;</span><br><span class="line">    byte[] swrBytes = System.Text.Encoding.UTF8.GetBytes(text);</span><br><span class="line">    return File(swrBytes, &quot;application/vnd.ms-excel&quot;, System.Web.HttpUtility.UrlEncode(&quot;ttttt.csv&quot;, System.Text.Encoding.UTF8));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 编译后，通过前台调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Html.ActionLink(&quot;导出&quot;, &quot;Export&quot;, &quot;Home&quot;)</span><br></pre></td></tr></table></figure></p><p>导出成功了，用txt打开，正常显示，查看编码UTF-8，看似完全没有问题。</p><h6 id="然而，当我用excel打开的时候，问题来了：中文乱码。-然后之前文件流输出的用excel打开正常，streamwriter写入本地文件的方式，用excel打开也正常。"><a href="#然而，当我用excel打开的时候，问题来了：中文乱码。-然后之前文件流输出的用excel打开正常，streamwriter写入本地文件的方式，用excel打开也正常。" class="headerlink" title="然而，当我用excel打开的时候，问题来了：中文乱码。 然后之前文件流输出的用excel打开正常，streamwriter写入本地文件的方式，用excel打开也正常。"></a>然而，当我用excel打开的时候，问题来了：中文乱码。 然后之前文件流输出的用excel打开正常，streamwriter写入本地文件的方式，用excel打开也正常。</h6><p>据此我进行了一系列对比，和原来的文件流输出对比，和streamWriter本地写入的文件对比，发现一个问题，那就是通过mvc导出的文件，比其他两种方式的文件少3个字节。</p><p>发现现象，就可以通过现象推理本质了，那么在文件流输出的代码里找到了下面这句代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Web.HttpContext.Current.Response.BinaryWrite(new byte[] &#123; 0xEF, 0xBB, 0xBF &#125;);</span><br></pre></td></tr></table></figure><p>不多不少，正好3个字节，难道是它的原因吗？</p><h6 id="于是我在mvc的file输出时，添加上这3个字节"><a href="#于是我在mvc的file输出时，添加上这3个字节" class="headerlink" title="于是我在mvc的file输出时，添加上这3个字节"></a>于是我在mvc的file输出时，添加上这3个字节</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public ActionResult Export()</span><br><span class="line">&#123;</span><br><span class="line">    string text = &quot;我乃闲人弹琴&quot;;</span><br><span class="line"></span><br><span class="line">    byte[] bomBytes = new byte[] &#123; 0xEF, 0xBB, 0xBF &#125;;</span><br><span class="line">    byte[] swrBytes = System.Text.Encoding.UTF8.GetBytes(text);</span><br><span class="line">    return File(bomBytes.Concat(swrBytes).ToArray(), &quot;application/vnd.ms-excel&quot;, System.Web.HttpUtility.UrlEncode(&quot;ttttt.csv&quot;, System.Text.Encoding.UTF8));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="不出所料，成功了。用excel打开没有乱码。"><a href="#不出所料，成功了。用excel打开没有乱码。" class="headerlink" title="不出所料，成功了。用excel打开没有乱码。"></a>不出所料，成功了。用excel打开没有乱码。</h6><p>那么是什么导致了这个问题呢？通过查询后，我找到了这么词：BOM，即(Byte Order Mark)</p><p>问题就明了了起来，原因就是exce读取csv文件时，需要读取这个所谓的BOM，来决定用什么格式进行解码，而MVC的File方法生成的文件中并没有这个文件头，所以在上面方法中，我通过手动添加BOM（那三个字节）来解决了问题，除了添加字节外，还有一种方法是在string的开头添加字符，也可以解决问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ActionResult Export()</span><br><span class="line">&#123;</span><br><span class="line">    string text = &quot;\uFEFF&quot; + &quot;我乃闲人弹琴&quot;;</span><br><span class="line">    byte[] swrBytes = System.Text.Encoding.UTF8.GetBytes(text);</span><br><span class="line">    return File(swrBytes, &quot;application/vnd.ms-excel&quot;, System.Web.HttpUtility.UrlEncode(&quot;ttttt.csv&quot;, System.Text.Encoding.UTF8));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>the end.</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSV乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net 类/Datatable 转换json时间格式带T</title>
      <link href="2019/05/21/Net-%E7%B1%BB-Datatable-%E8%BD%AC%E6%8D%A2json%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%B8%A6T/"/>
      <url>2019/05/21/Net-%E7%B1%BB-Datatable-%E8%BD%AC%E6%8D%A2json%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%B8%A6T/</url>
      
        <content type="html"><![CDATA[<p>在.net中，使用Newtonsoft.Json将类或Datatable转为为json的时候，时间格式往往带T字符。<br>解决方案</p><h6 id="1-添加引用"><a href="#1-添加引用" class="headerlink" title="1.添加引用"></a>1.添加引用</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">using Newtonsoft.Json;</span><br><span class="line">using Newtonsoft.Json.Converters;</span><br></pre></td></tr></table></figure><h6 id="2-格式化时间"><a href="#2-格式化时间" class="headerlink" title="2.格式化时间"></a>2.格式化时间</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IsoDateTimeConverter timeConverter = new IsoDateTimeConverter &#123; DateTimeFormat =&quot;yyyy-MM-dd HH:mm:ss&quot;&#125;;</span><br><span class="line">//使用设定的时间格式转换为json</span><br><span class="line">string jsonStr = JsonConvert.SerializeObject(table, Formatting.Indented, timeConverter);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> .net </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows与mac双端用hexo写博客</title>
      <link href="2019/05/17/Windows%E4%B8%8Emac%E5%8F%8C%E7%AB%AF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
      <url>2019/05/17/Windows%E4%B8%8Emac%E5%8F%8C%E7%AB%AF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>在公司的thinkpad p52部署好hexo后，想到可能家里也需要更博客，于是就有了双端写博客的想法，顺带把mac部署hexo和git也练习了一下，两个WINDOWS端写博客应该是同样道理。<br>原理简单说，就是另外建仓库存hexo源代码(我看有的朋友在之前hexo基础上使用了分支，我嫌麻烦，所以就干脆另外创建了一个仓库，专门存放源代码)</p><h3 id="一、原windows机器操作"><a href="#一、原windows机器操作" class="headerlink" title="一、原windows机器操作"></a>一、原windows机器操作</h3><h5 id="1-新建一个GitHub仓库"><a href="#1-新建一个GitHub仓库" class="headerlink" title="1.新建一个GitHub仓库"></a>1.新建一个GitHub仓库</h5><p>这里我命名为GitPageSource</p><h5 id="2-将之前的源码上传到github"><a href="#2-将之前的源码上传到github" class="headerlink" title="2.将之前的源码上传到github"></a>2.将之前的源码上传到github</h5><p>我这里就是windows本地新建一个文件夹，命名为gitpagesource，然后将空仓库clone到此地，然后将之前的源代码都复制到这个文件夹下，在进行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"source"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>这样，就将之前准备好的hexo源码成功的上传到git上了。<br>这里需要注意的是，自己后来从其他地方clone的主题因为内含git环境，所以并没有上传到仓库里，后来我删除了主题中的git环境才上传到仓库里，此方法在上一篇博客中详细记载过。</p><h3 id="二、新电脑MAC操作"><a href="#二、新电脑MAC操作" class="headerlink" title="二、新电脑MAC操作"></a>二、新电脑MAC操作</h3><h5 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1.安装环境"></a>1.安装环境</h5><p>分别安装node，git(安装Xcode后自带git)</p><h5 id="2-clone源码"><a href="#2-clone源码" class="headerlink" title="2.clone源码"></a>2.clone源码</h5><p>在本地找个合适的目录，将github上的之前上传的hexo源码克隆下来。</p><h5 id="3-安装hexo环境"><a href="#3-安装hexo环境" class="headerlink" title="3.安装hexo环境"></a>3.安装hexo环境</h5><p>因为之前源码中.gitignore中自动设置，hexo环境不上传到github(也确实不需要)，所以github上的源码是不包含hexo环境的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切换到hexo代码目录</span></span><br><span class="line">$ <span class="built_in">cd</span> documents/gitpagesource</span><br><span class="line"><span class="comment">#安装环境</span></span><br><span class="line">$ npm install hexo -g</span><br></pre></td></tr></table></figure></p><p>至此，hexo已安装完毕，尝试生成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><p>后，localhost:4000已可以正常访问，并且hexo admin和search功能都没有需要重装即可正常使用。</p><h5 id="4-部署到githubPage"><a href="#4-部署到githubPage" class="headerlink" title="4.部署到githubPage"></a>4.部署到githubPage</h5><p>切换~/.ssh目录提示不存在，所以接下来需要生成ssh，添加ssh到github，然后通过hexo d 进行部署<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装deployer</span></span><br><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line"><span class="comment">#生成ssh，注意大小写</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"xxx@email.com"</span></span><br></pre></td></tr></table></figure></p><p>然后打开~/.ssh目录找到id_psa.pub，复制下来添加到github里。</p><p>完成后，运行以下命令部署到githubpage上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure></p><p>此时会提示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure></p><p>提示的原因是由于ssh目录中只有id_psa文件，缺少known_hosts文件，输入yes后会自动生成，否则就会报如下错误<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (13.250.177.223)'</span> can<span class="string">'t be established.</span></span><br></pre></td></tr></table></figure></p><p>好了，大功告成，至此mac也可以写博客并部署了。</p><h6 id="但是千万不要忘记的是，无论是mac还是windows，在每次写博客之前都要从github上把源代码pull下来。"><a href="#但是千万不要忘记的是，无论是mac还是windows，在每次写博客之前都要从github上把源代码pull下来。" class="headerlink" title="但是千万不要忘记的是，无论是mac还是windows，在每次写博客之前都要从github上把源代码pull下来。"></a>但是千万不要忘记的是，无论是mac还是windows，在每次写博客之前都要从github上把源代码pull下来。</h6><h6 id="写完博客后，也要add-commit和push-否则多端不同步，就不开心了。"><a href="#写完博客后，也要add-commit和push-否则多端不同步，就不开心了。" class="headerlink" title="写完博客后，也要add,commit和push.否则多端不同步，就不开心了。"></a>写完博客后，也要add,commit和push.否则多端不同步，就不开心了。</h6><h6 id="20190626更新，这两天教媳妇搭博客，她始终搞不明白双端的关系，所以我花了这个图，记录一下。"><a href="#20190626更新，这两天教媳妇搭博客，她始终搞不明白双端的关系，所以我花了这个图，记录一下。" class="headerlink" title="20190626更新，这两天教媳妇搭博客，她始终搞不明白双端的关系，所以我花了这个图，记录一下。"></a>20190626更新，这两天教媳妇搭博客，她始终搞不明白双端的关系，所以我花了这个图，记录一下。</h6><p><img src="\images\pasted-sam-3.png" alt="upload successful"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS C#类库生成帮助文档 CHS</title>
      <link href="2019/05/17/VS-C-%E7%B1%BB%E5%BA%93%E7%94%9F%E6%88%90%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3-CHS/"/>
      <url>2019/05/17/VS-C-%E7%B1%BB%E5%BA%93%E7%94%9F%E6%88%90%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3-CHS/</url>
      
        <content type="html"><![CDATA[<h6 id="1-VS项目设置–生成中勾选生成XML文档"><a href="#1-VS项目设置–生成中勾选生成XML文档" class="headerlink" title="1.VS项目设置–生成中勾选生成XML文档"></a>1.VS项目设置–生成中勾选生成XML文档</h6><h6 id="2-下载SHFB"><a href="#2-下载SHFB" class="headerlink" title="2.下载SHFB"></a>2.下载SHFB</h6><p><a href="https://github.com/EWSoftware/SHFB/releases" target="_blank" rel="noopener">github下载链接</a></p><h6 id="3-如用上面自带GUI工具，需要安装microsoft依赖"><a href="#3-如用上面自带GUI工具，需要安装microsoft依赖" class="headerlink" title="3.如用上面自带GUI工具，需要安装microsoft依赖"></a>3.如用上面自带GUI工具，需要安装microsoft依赖</h6><p><a href="https://www.microsoft.com/zh-CN/download/confirmation.aspx?id=48159" target="_blank" rel="noopener">Microsoft Build Tool</a></p><h6 id="4-打开GUI工具，新建项目，添加XML，生成"><a href="#4-打开GUI工具，新建项目，添加XML，生成" class="headerlink" title="4.打开GUI工具，新建项目，添加XML，生成"></a>4.打开GUI工具，新建项目，添加XML，生成</h6><p>大功告成.</p>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> .net </tag>
            
            <tag> 帮助文档 </tag>
            
            <tag> 类库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo源文件上传github时不上传主题的解决方法</title>
      <link href="2019/05/17/Hexo%E6%BA%90%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0github%E6%97%B6%E4%B8%8D%E4%B8%8A%E4%BC%A0%E4%B8%BB%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>2019/05/17/Hexo%E6%BA%90%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0github%E6%97%B6%E4%B8%8D%E4%B8%8A%E4%BC%A0%E4%B8%BB%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>本来想在公司和家里双端（windows和mac）对博客进行维护，在公司把hexo源文件上传github后，到家里下载下来源文件，可碰到了空白页的问题，查了才发现主题（next）并没有上传到github上。网上搜索后，找到了原因。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>经查证，原因是因为next主题是从github上clone下来的，所以自身有git属性，造成不上传。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">删除next目录下所有.git,.gitignore,.github文件夹和文件。</span><br><span class="line"></span><br><span class="line">执行以下命令</span><br><span class="line">git rm --cached themes/next</span><br><span class="line">git add themes/next</span><br></pre></td></tr></table></figure><p>然后提交，push。<br>但是此时又发现一个新问题，那就是由于本来github上有next空文件夹，此时又要提交，所以需要合并，会提示如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">To https://github.com/SamXRTQ/GitPageSource.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to <span class="string">'https://github.com/SamXRTQ/GitPageSource.git'</span></span><br><span class="line">hint: Updates were rejected because the remote contains work that you <span class="keyword">do</span></span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure></p><p>此时需要做的操作是从github上把文件拉取下来，合并后重新提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git commit -m <span class="string">"xxxx"</span></span><br></pre></td></tr></table></figure></p><p>但是commit的时候，会让输入合并的理由<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please enter a commit message to explain why this merge is necessary</span><br></pre></td></tr></table></figure></p><p>此时命令框会进入一个看似无法操作的界面，需按以下步骤进行操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">按i键，进入insert模式，输入内容</span><br><span class="line">按ESC</span><br><span class="line">输入&quot;:wq&quot;,按回车键</span><br></pre></td></tr></table></figure></p><p>然后提交，push，大功告成。github上已有了主题文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用中碰到的问题</title>
      <link href="2019/05/16/Hexo%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
      <url>2019/05/16/Hexo%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="汉字乱码"><a href="#汉字乱码" class="headerlink" title="汉字乱码"></a>汉字乱码</h3><p>这种情况需要将站点配置文件和主题配置文件的编码均改为utf-8就可以了</p><h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><p>需要使用NEXT主题，原带land主题好像不行。</p><h6 id="1-安装NEXT主题并启用"><a href="#1-安装NEXT主题并启用" class="headerlink" title="1.安装NEXT主题并启用"></a>1.安装NEXT主题并启用</h6><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next主题官网</a></p><h6 id="2-安装search插件"><a href="#2-安装search插件" class="headerlink" title="2.安装search插件"></a>2.安装search插件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h6 id="3-站点配置文件增加以下选项"><a href="#3-站点配置文件增加以下选项" class="headerlink" title="3.站点配置文件增加以下选项"></a>3.站点配置文件增加以下选项</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><h6 id="4-主题配置文件修改以下选项-next主题"><a href="#4-主题配置文件修改以下选项-next主题" class="headerlink" title="4.主题配置文件修改以下选项(next主题)"></a>4.主题配置文件修改以下选项(next主题)</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>大功告成。</p><h3 id="添加标签页"><a href="#添加标签页" class="headerlink" title="添加标签页"></a>添加标签页</h3><h6 id="1-在主题中启用标签页，并将地址改为"><a href="#1-在主题中启用标签页，并将地址改为" class="headerlink" title="1.在主题中启用标签页，并将地址改为"></a>1.在主题中启用标签页，并将地址改为</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/tags</span><br></pre></td></tr></table></figure><h6 id="2-添加一个page，名字为tags，并将目录下的inxex-md文件编辑，type设置为tags"><a href="#2-添加一个page，名字为tags，并将目录下的inxex-md文件编辑，type设置为tags" class="headerlink" title="2.添加一个page，名字为tags，并将目录下的inxex.md文件编辑，type设置为tags"></a>2.添加一个page，名字为tags，并将目录下的inxex.md文件编辑，type设置为tags</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-05-16 17:04:11</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Admin粘贴图片后不显示</title>
      <link href="2019/05/16/Hexo-Admin%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%87%E5%90%8E%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
      <url>2019/05/16/Hexo-Admin%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%87%E5%90%8E%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<p>使用Hexo Admin编写博客后，发现图片不显示的情况，经过一系列调研，发现图片地址问题，默认粘贴后，Markdown里显示的地址是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![upload successful](\\images\pasted-0.png\)</span><br></pre></td></tr></table></figure></p><p>我将它改成下面这样后，就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![upload successful](\images\pasted-0.png)</span><br></pre></td></tr></table></figure></p><p>开头结尾各删除一个反斜杠。</p><p>以上适用于windows。MAC应该不用去除反斜杠。</p><hr><p>下面一个问题，是关于图片路径问题</p><p>在admin粘贴图片后，在md文件中，可以看到图片路径是\images\xxx.png，但是生成html后，在博客的html中，显示的路径确是博文的相对路径，这样就导致了图片不能显示（图片在images里，并没有在博文的目录里）。</p><p>这个问题深深的困扰了我。</p><p>然后经过不断的尝试摸索试验，与之前没问题的版本对比，最终发现与这个文件有关。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules\marked\lib\marked.js</span><br></pre></td></tr></table></figure></p><p>经比对，这个文件版本新的时候，生成图片路径就是带有博文的相对路径。<br>于是我从CDN上找到了旧版本，次处以0.3.17版为例，我并没有挨个版本尝试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.bootcss.com/marked/0.3.17/marked.js</span><br></pre></td></tr></table></figure></p><p>经过替换后，神奇的路径变成了不带博文的路径。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建立HEXO+github博客</title>
      <link href="2019/05/16/%E5%BB%BA%E7%AB%8BHEXO-github%E5%8D%9A%E5%AE%A2/"/>
      <url>2019/05/16/%E5%BB%BA%E7%AB%8BHEXO-github%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>这两天忽然想在github上建立一个博客，查了一些资料后，终于大功告成，这里把步骤记下来，留个备份。</p><h2 id="一、Github相关"><a href="#一、Github相关" class="headerlink" title="一、Github相关"></a>一、Github相关</h2><h3 id="1-注册GitHub账户"><a href="#1-注册GitHub账户" class="headerlink" title="1.注册GitHub账户"></a>1.注册GitHub账户</h3><p>现在私有仓库也是免费的。</p><h3 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h3><p>仓库名需要   xxx.github.io    xxx代表用户名，这样才可以以page的方式访问。</p><h3 id="3-开启Github-Pages"><a href="#3-开启Github-Pages" class="headerlink" title="3.开启Github Pages"></a>3.开启Github Pages</h3><p>在设置中，找到Github Pages，并将其开启。</p><h3 id="4-下载Github客户端"><a href="#4-下载Github客户端" class="headerlink" title="4.下载Github客户端"></a>4.下载Github客户端</h3><p>官方下载对应版本即可</p><p>至此，Github方面的内容已安装完毕。下面将装Hexo相关。</p><h2 id="二、Hexo"><a href="#二、Hexo" class="headerlink" title="二、Hexo"></a>二、Hexo</h2><h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h3><p>官方下载安装  <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载Node.js</a></p><h3 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h3><p>官方下载安装    <a href="https://git-scm.com/download/" target="_blank" rel="noopener">下载git</a></p><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><p>建立一个目录，用来存放Hexo，在目录中右键选择 Git Bash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="4-生成"><a href="#4-生成" class="headerlink" title="4.生成"></a>4.生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean <span class="comment">#清理</span></span><br><span class="line">$ hexo g   <span class="comment">#生成</span></span><br><span class="line">$ hexo s   <span class="comment">#部署</span></span><br></pre></td></tr></table></figure><p>至此，hexo在本机的部署完毕，可通过<a href="http://localhost:4000访问本地。" target="_blank" rel="noopener">http://localhost:4000访问本地。</a><br>如需更换主题，需要建立文件夹将主题clone或拷贝进来，然后在_config.yml中找到 theme：属性，将其设置为新建的目录名称，然后重新生成，即可看到新的主题效果。</p><h3 id="5-安装Hexo-Admin"><a href="#5-安装Hexo-Admin" class="headerlink" title="5.安装Hexo Admin"></a>5.安装Hexo Admin</h3><p>Hexo本身可以用以下的方式进行写作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"name"</span></span><br></pre></td></tr></table></figure></p><p>但是，这样未免有些不方便。因此，有很多种插件可以进行写作和设置，这里我安装的是Hexo Admin插件。<br>用npm安装hexo admin插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-admin</span><br></pre></td></tr></table></figure></p><p>启动hexo后，<a href="http://localhost:4000/admin" target="_blank" rel="noopener">http://localhost:4000/admin</a>  就可以看到hexo admin主页面了。</p><h2 id="三、部署到github"><a href="#三、部署到github" class="headerlink" title="三、部署到github"></a>三、部署到github</h2><h3 id="1-设置与安装插件"><a href="#1-设置与安装插件" class="headerlink" title="1.设置与安装插件"></a>1.设置与安装插件</h3><p>先安装hexo-deployer-git插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>然后在_config.yml中进行以下设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repo: git@github.com:samxrtq/samxrtq.github.io.git  <span class="comment">#这里填的是自己的git(samxrtq是我的git)</span></span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure></p><p>上面有个需要注意的地方，是每个配置的冒号后面一定要加一个空格，否则不行！</p><h3 id="2-生成本地SSH-KEY"><a href="#2-生成本地SSH-KEY" class="headerlink" title="2.生成本地SSH KEY"></a>2.生成本地SSH KEY</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.切换到~/.ssh目录</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="comment"># 2.删除之前的ssh keys</span></span><br><span class="line">$ rm id_rsa*  </span><br><span class="line"><span class="comment"># 3.生成新的ssh key  填写github的email</span></span><br><span class="line"><span class="comment">#  注意此处需要回到hexo的目录</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"xxx@email.com"</span></span><br></pre></td></tr></table></figure><p>接下来提示是否创建密码（本机密码），我这里一路回车走过。需要注意的是，如果上面切换到~/.ssh目录时提示找不到ssh目录，那么可以直接进行第三部，生成ssh，会自动创建目录。<br>之后会在C:\Users\用户名.ssh目录下生成ssh信息，用记事本打开id_psa.pub备用</p><h3 id="3-配置Github的SSH以与本机Hexo关联"><a href="#3-配置Github的SSH以与本机Hexo关联" class="headerlink" title="3.配置Github的SSH以与本机Hexo关联"></a>3.配置Github的SSH以与本机Hexo关联</h3><p>打开Github主页，选择设置-SSH-New SSH Key，然后title随意输入备注，下面key中填入刚才id_psa.pub中的所有内容。</p><h3 id="4-设置git账号"><a href="#4-设置git账号" class="headerlink" title="4.设置git账号"></a>4.设置git账号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#随意设置</span></span><br><span class="line">$ git config --global user.name <span class="string">"name"</span>     </span><br><span class="line"><span class="comment">#github邮箱</span></span><br><span class="line">$ git config --global user.email <span class="string">"xxx@email.com"</span></span><br></pre></td></tr></table></figure><p>至此，hexo部署完成，执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>即可将本机部署到github中，然后访问xxx.github.io看看效果吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
